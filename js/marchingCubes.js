// -----------------------------------------------------------------------------
function minorMatrix(M, m, n, row, col) {
  var out = new Array(m - 1);
  for (var i = 0; i < m - 1; i++) {
    out[i] = new Array(n - 1);
    var ii = i < row ? i : i + 1;
    for (var j = 0; j < n - 1; j++) {
      var jj = j < col ? j : j + 1;
      out[i][j] = M[ii][jj];
    }
  }
  return out;
}

// -----------------------------------------------------------------------------
function scaleMatrix(k, M, m, n) {
  var out = new Array(m);
  for (var i = 0; i < m; i++) {
    out[i] = new Array(n);
    for (var j = 0; j < n; j++) {
      out[i][j] = k * M[i][j];
    }
  }
  return out;
}

// -----------------------------------------------------------------------------
function scaleMinorMatrix(k, M, m, n, row, col) {
  return scaleMatrix(k, minorMatrix(M, m, n, row, col), m - 1, n - 1);
}

// -----------------------------------------------------------------------------
function matricialSum(M1, M2, m, n) {
  var out = new Array(m);
  for (var i = 0; i < m; i++) {
    out[i] = new Array(n);
    for (var j = 0; j < n; j++) {
      out[i][j] = M1[i][j] + M2[i][j];
    }
  }
  return out;
}

// -----------------------------------------------------------------------------
function levelMatrix(M, m, n, level, strict) {
  var out = new Array(m);
  for (var i = 0; i < m; i++) {
    out[i] = new Array(n);
    for (var j = 0; j < n; j++) {
      out[i][j] = (strict ? (M[i][j] > level) : (M[i][j] >= level)) ? 1 : 0;
    }
  }
  return out;
}

// -----------------------------------------------------------------------------
function toMatrix(A, m, n, k) {
  var out = new Array(m);
  for (var i = 0; i < m; i++) {
    out[i] = new Array(n);
    for (var j = 0; j < n; j++) {
      out[i][j] = A[i][j][k];
    }
  }
  return out;
}

// ----------------------------------------------------------------------------
function maxArray(A, m, n, p) {
  var max = null;
  for (var k = 0; k < p; k++) {
    for (var i = 0; i < m; i++) {
      for (var j = 0; j < n; j++) {
        max = Math.max(max, A[i][j][k]);
      }
    }  
  }
  return max;
}

// -----------------------------------------------------------------------------
function whichIndicesAndItems(M, m, n) {
  var out = { indices: [], items: [], length: null };
  var k = 0; var ij = 0;
  for (var j = 0; j < n; j++) {
    for (var i = 0; i < m; i++) {
      if (M[i][j] > 0 && M[i][j] < 255) {
        out.indices.push(ij);
        out.items.push(M[i][j]);
        k++;
      }
      ij++;
    }
  }
  out.length = k;
  return out;
}

// -----------------------------------------------------------------------------
function kro1(M, nx, ny, n) {
  var out = new Array(nx * n + 1);
  for (var i = 0; i < nx * n; i++) {
    out[i] = new Array(ny);
    for (var j = 0; j < ny; j++) {
      out[i][j] = M[i % nx][j];
    }
  }
  out[nx * n] = new Array(ny);
  for (var j = 0; j < ny; j++) {
    out[nx * n][j] = 0;
  }
  return out;
}

// -----------------------------------------------------------------------------
function kro2(M, nx, ny, n) {
  var out = new Array(nx * n + 1);
  var replicates = new Array(nx * n);
  var count = 0;
  for (var i = 0; i < nx; i++) {
    for (var m = 0; m < n; m++) {
      replicates[count] = i;
      count++;
    }
  }
  for (var i = 0; i < nx * n; i++) {
    out[i] = new Array(ny);
    for (var j = 0; j < ny; j++) {
      out[i][j] = M[replicates[i]][j];
    }
  }
  out[nx * n] = new Array(ny);
  for (var j = 0; j < ny; j++) {
    out[nx * n][j] = 0;
  }
  return out;
}

// -----------------------------------------------------------------------------
function replicate(x, counts, n) {
  var total = 0;
  for (var i = 0; i < n; i++) {
    total += counts[i];
  }
  var out = new Array(total);
  var count = 0;
  for (var i = 0; i < n; i++) {
    for (var j = 0; j < counts[i]; j++) {
      out[count] = x[i];
      count++;
    }
  }
  return out;
}

// ----------------------------------------------------------------------------
function repeach(x, times, n) {
  var out = new Array(n * times);
  var count = 0;
  for (var i = 0; i < n; i++) {
    for (var j = 0; j < times; j++) {
      out[count] = x[i];
      count++;
    }
  }
  return out;
}

// concatenate rows of a jagged array ------------------------------------------
function unlist(jagged, jaggedsizes, rows, nrows) {
  var count = 0;
  for (var i = 0; i < nrows; i++) {
    count += jaggedsizes[rows[i]];
  }
  var out = new Array(count);
  count = 0;
  for (var i = 0; i < nrows; i++) {
    for (var j = 0; j < jaggedsizes[rows[i]]; j++) {
      out[count] = jagged[rows[i]][j];
      count++;
    }
  }
  return out;
}

// R: matrix(M, ncol=ncol, byrow=TRUE) ----------------------------------------
function vector2matrix(M, lengthM, ncol) {
  var nrow = lengthM / ncol;
  var out = new Array(nrow);
  for (var i = 0; i < nrow; i++) {
    out[i] = new Array(ncol);
    for (var j = 0; j < ncol; j++) {
      out[i][j] = M[i * ncol + j];
    }
  }
  return out;
}

// ----------------------------------------------------------------------------
function matrix2vectorMinusFirstColumn(M, nrow, ncol) {
  var out = new Array(nrow * (ncol - 1));
  for (var i = 0; i < nrow; i++) {
    for (var j = 1; j < ncol; j++) {
      out[i * (ncol - 1) + j - 1] = M[i][j];
    }
  }
  return out;
}

// -----------------------------------------------------------------------------
function cbind(M, v1, v2, nrow, ncol) {
  var out = new Array(nrow);
  for (var i = 0; i < nrow; i++) {
    out[i] = new Array(ncol + 2);
    for (var j = 0; j < ncol; j++) {
      out[i][j] = M[i][j];
    }
    out[i][ncol] = v1[i];
    out[i][ncol + 1] = v2[i];
  }
  return out;
}

// -----------------------------------------------------------------------------
function subsetMatrix(M, rows, cols, nrows, ncols) {
  var out = new Array(nrows);
  for (var i = 0; i < nrows; i++) {
    out[i] = new Array(ncols);
    for (var j = 0; j < ncols; j++) {
      out[i][j] = M[rows[i]][cols[j]];
    }
  }
  return out;
}

// -----------------------------------------------------------------------------
function whichEqual(v, x, lv) {
  var flag = new Array(lv);
  var count = 0;
  for (var i = 0; i < lv; i++) {
    if (v[i] == x) {
      flag[i] = 1;
      count++;
    } else {
      flag[i] = 0;
    }
  }
  var out = new Array(count);
  count = 0;
  for (var i = 0; i < lv; i++) {
    if (flag[i]) {
      out[count] = i;
      count++;
    }
  }
  return out;
}

// -----------------------------------------------------------------------------
function jthColumn(M, lengthM, ncol, j) {
  var nrow = lengthM / ncol;
  var out = new Array(nrow);
  for (var i = 0; i < nrow; i++) {
    out[i] = M[i * ncol + j];
  }
  return out;
}

// -----------------------------------------------------------------------------
function jthColumn2(M, nrow, j) {
  var out = new Array(nrow);
  for (var i = 0; i < nrow; i++) {
    out[i] = M[i][j];
  }
  return out;
}

// -----------------------------------------------------------------------------
function transpose(M, nrow, ncol) {
  var out = new Array(ncol);
  for (var i = 0; i < ncol; i++) {
    out[i] = new Array(nrow);
    for (var j = 0; j < nrow; j++) {
      out[i][j] = M[j][i];
    }
  }
  return out;
}

// -----------------------------------------------------------------------------
function vectorialSum(v1, v2, l) {
  var out = new Array(l);
  for (var i = 0; i < l; i++) {
    out[i] = v1[i] + v2[i];
  }
  return out;
}

// -----------------------------------------------------------------------------
var CaseRotationFlip = [
  [1, 24, 1],
  [2, 19, 1],
  [2, 17, 1],
  [3, 17, 1],
  [2, 24, 1],
  [4, 24, 1],
  [3, 24, 1],
  [6, 10, 1],
  [2, 15, 1],
  [3, 19, 1],
  [4, 17, 1],
  [6, 9, 1],
  [3, 9, 1],
  [6, 8, 1],
  [6, 1, 1],
  [9, 23, -1],
  [2, 20, 1],
  [3, 18, 1],
  [4, 7, 1],
  [6, 16, 1],
  [5, 24, 1],
  [7, 5, 1],
  [7, 24, 1],
  [12, 9, 1],
  [4, 20, 1],
  [6, 22, 1],
  [8, 24, 1],
  [10, 24, -1],
  [7, 9, 1],
  [15, 24, -1],
  [13, 20, -1],
  [6, 20, -1],
  [2, 21, 1],
  [4, 6, 1],
  [3, 16, 1],
  [6, 4, 1],
  [4, 16, 1],
  [8, 23, 1],
  [6, 14, 1],
  [10, 23, -1],
  [5, 21, 1],
  [7, 10, 1],
  [7, 16, 1],
  [15, 9, 1],
  [7, 2, 1],
  [13, 8, 1],
  [12, 23, -1],
  [6, 6, -1],
  [3, 6, 1],
  [6, 17, 1],
  [6, 18, 1],
  [9, 18, 1],
  [7, 4, 1],
  [13, 17, 1],
  [15, 18, 1],
  [6, 13, -1],
  [7, 6, 1],
  [12, 16, 1],
  [13, 18, 1],
  [6, 2, -1],
  [11, 24, 1],
  [7, 3, -1],
  [7, 12, -1],
  [3, 12, -1],
  [2, 23, 1],
  [5, 23, 1],
  [4, 23, 1],
  [7, 1, 1],
  [3, 14, 1],
  [7, 14, 1],
  [6, 21, 1],
  [15, 23, -1],
  [4, 15, 1],
  [7, 19, 1],
  [8, 19, 1],
  [13, 23, -1],
  [6, 11, 1],
  [12, 17, -1],
  [10, 19, -1],
  [6, 23, -1],
  [4, 12, 1],
  [7, 18, 1],
  [8, 22, 1],
  [13, 16, 1],
  [7, 13, 1],
  [11, 23, 1],
  [13, 21, 1],
  [7, 15, -1],
  [8, 21, 1],
  [13, 22, 1],
  [14, 24, -1],
  [8, 15, -1],
  [13, 11, 1],
  [7, 7, -1],
  [8, 12, -1],
  [4, 22, -1],
  [3, 23, 1],
  [7, 23, 1],
  [6, 24, 1],
  [12, 18, 1],
  [6, 7, 1],
  [13, 19, -1],
  [9, 24, 1],
  [6, 19, -1],
  [7, 21, 1],
  [11, 18, 1],
  [13, 24, 1],
  [7, 20, -1],
  [15, 16, -1],
  [7, 22, -1],
  [6, 15, -1],
  [3, 22, -1],
  [6, 3, 1],
  [15, 17, 1],
  [10, 22, -1],
  [6, 12, -1],
  [12, 24, 1],
  [7, 11, -1],
  [6, 5, -1],
  [3, 15, -1],
  [13, 10, -1],
  [7, 8, -1],
  [8, 20, -1],
  [4, 9, -1],
  [7, 17, -1],
  [5, 22, -1],
  [4, 18, -1],
  [2, 22, -1],
  [2, 22, 1],
  [4, 18, 1],
  [5, 22, 1],
  [7, 17, 1],
  [4, 9, 1],
  [8, 20, 1],
  [7, 8, 1],
  [13, 10, 1],
  [3, 15, 1],
  [6, 5, 1],
  [7, 11, 1],
  [12, 24, -1],
  [6, 12, 1],
  [10, 22, 1],
  [15, 17, -1],
  [6, 3, -1],
  [3, 22, 1],
  [6, 15, 1],
  [7, 22, 1],
  [15, 16, 1],
  [7, 20, 1],
  [13, 24, -1],
  [11, 18, -1],
  [7, 21, -1],
  [6, 19, 1],
  [9, 24, -1],
  [13, 19, 1],
  [6, 7, -1],
  [12, 18, -1],
  [6, 24, -1],
  [7, 23, -1],
  [3, 23, -1],
  [4, 22, 1],
  [8, 12, 1],
  [7, 7, 1],
  [13, 11, -1],
  [8, 15, 1],
  [14, 24, 1],
  [13, 22, -1],
  [8, 21, -1],
  [7, 15, 1],
  [13, 21, -1],
  [11, 23, -1],
  [7, 13, -1],
  [13, 16, -1],
  [8, 22, -1],
  [7, 18, -1],
  [4, 12, -1],
  [6, 23, 1],
  [10, 19, 1],
  [12, 17, 1],
  [6, 11, -1],
  [13, 23, 1],
  [8, 19, -1],
  [7, 19, -1],
  [4, 15, -1],
  [15, 23, 1],
  [6, 21, -1],
  [7, 14, -1],
  [3, 14, -1],
  [7, 1, -1],
  [4, 23, -1],
  [5, 23, -1],
  [2, 23, -1],
  [3, 12, 1],
  [7, 12, 1],
  [7, 3, 1],
  [11, 24, -1],
  [6, 2, 1],
  [13, 18, -1],
  [12, 16, -1],
  [7, 6, -1],
  [6, 13, 1],
  [15, 18, -1],
  [13, 17, -1],
  [7, 4, -1],
  [9, 18, -1],
  [6, 18, -1],
  [6, 17, -1],
  [3, 6, -1],
  [6, 6, 1],
  [12, 23, 1],
  [13, 8, -1],
  [7, 2, -1],
  [15, 9, -1],
  [7, 16, -1],
  [7, 10, -1],
  [5, 21, -1],
  [10, 23, 1],
  [6, 14, -1],
  [8, 23, -1],
  [4, 16, -1],
  [6, 4, -1],
  [3, 16, -1],
  [4, 6, -1],
  [2, 21, -1],
  [6, 20, 1],
  [13, 20, 1],
  [15, 24, 1],
  [7, 9, -1],
  [10, 24, 1],
  [8, 24, -1],
  [6, 22, -1],
  [4, 20, -1],
  [12, 9, -1],
  [7, 24, -1],
  [7, 5, -1],
  [5, 24, -1],
  [6, 16, -1],
  [4, 7, -1],
  [3, 18, -1],
  [2, 20, -1],
  [9, 23, 1],
  [6, 1, -1],
  [6, 8, -1],
  [3, 9, -1],
  [6, 9, -1],
  [4, 17, -1],
  [3, 19, -1],
  [2, 15, -1],
  [6, 10, -1],
  [3, 24, -1],
  [4, 24, -1],
  [2, 24, -1],
  [3, 17, -1],
  [2, 17, -1],
  [2, 19, -1],
  [1, 24, -1]
];

// -----------------------------------------------------------------------------
var indexArray = [
  [0, 0, 0],
  [1, 0, 0],
  [1, 1, 0],
  [0, 1, 0],
  [0, 0, 1],
  [1, 0, 1],
  [1, 1, 1],
  [0, 1, 1]
];

// -----------------------------------------------------------------------------
var EdgesLengths =
  [3, 3, 6, 3, 18, 6, 9, 3, 6, 18, 9, 6, 9, 9, 6, 3, 6, 18, 9, 24, 48, 48,
    12, 18, 9, 177, 12, 48, 12, 96, 9, 3, 18, 6, 9, 18, 177, 9, 12, 24, 48, 48,
    12, 48, 96, 12, 9, 6, 9, 9, 6, 48, 96, 12, 9, 48, 12, 96, 9, 96, 48, 48, 6,
    3, 24, 18, 48, 6, 48, 9, 12, 18, 48, 177, 96, 9, 12, 12, 9, 18, 48, 177,
    96, 48, 96, 96, 48, 177, 96, 816, 177, 96, 48, 177, 18, 6, 48, 9, 12, 9,
    96, 6, 9, 48, 96, 96, 48, 12, 48, 9, 6, 9, 12, 12, 9, 12, 48, 9, 6, 96, 48,
    177, 18, 48, 24, 18, 3, 3, 18, 24, 48, 18, 177, 48, 96, 6, 9, 48, 12, 9,
    12, 12, 9, 6, 9, 48, 12, 48, 96, 96, 48, 9, 6, 96, 9, 12, 9, 48, 6, 18,
    177, 48, 96, 177, 816, 96, 177, 48, 96, 96, 48, 96, 177, 48, 18, 9, 12, 12,
    9, 96, 177, 48, 18, 12, 9, 48, 6, 48, 18, 24, 3, 6, 48, 48, 96, 9, 96, 12,
    48, 9, 12, 96, 48, 6, 9, 9, 6, 9, 12, 96, 48, 12, 48, 48, 24, 12, 9, 177,
    18, 9, 6, 18, 3, 9, 96, 12, 48, 12, 177, 9, 18, 12, 48, 48, 24, 9, 18, 6,
    3, 6, 9, 9, 6, 9, 18, 6, 3, 9, 6, 18, 3, 6, 3, 3];

// -----------------------------------------------------------------------------
var EdgePoints = [
  [1, 1, 2],
  [2, 2, 3],
  [3, 3, 4],
  [4, 4, 1],
  [5, 5, 6],
  [6, 6, 7],
  [7, 7, 8],
  [8, 8, 5],
  [9, 1, 5],
  [10, 2, 6],
  [11, 3, 7],
  [12, 4, 8],
  [13, 9, 9]
];

// -----------------------------------------------------------------------------
var Edges = [
  [4, 9, 1],
  [1, 10, 2],
  [9, 10, 4, 10, 2, 4],
  [2, 11, 3],
  [2, 11, 3, 4, 9, 1, 2, 11, 1, 11, 9, 1, 11, 4, 9, 11, 3, 4],
  [10, 11, 1, 11, 3, 1],
  [4, 9, 3, 3, 9, 11, 9, 10, 11],
  [12, 4, 3],
  [12, 9, 3, 9, 1, 3],
  [1, 10, 2, 3, 12, 4, 1, 10, 4, 10, 12, 4, 10, 3, 12, 10, 2, 3],
  [3, 12, 2, 2, 12, 10, 12, 9, 10],
  [4, 2, 12, 2, 11, 12],
  [2, 11, 1, 1, 11, 9, 11, 12, 9],
  [1, 10, 4, 4, 10, 12, 10, 11, 12],
  [11, 9, 10, 11, 12, 9],
  [8, 5, 9],
  [5, 1, 8, 1, 4, 8],
  [10, 2, 1, 9, 8, 5, 10, 2, 5, 2, 8, 5, 2, 9, 8, 2, 1, 9],
  [10, 2, 5, 5, 2, 8, 2, 4, 8],
  [2, 11, 3, 9, 8, 5, 2, 9, 3, 9, 8, 3, 11, 3, 8, 2, 11, 5, 2, 5, 9, 11, 8, 5],
  [4, 8, 1, 8, 5, 1, 2, 11, 3, 4, 8, 3, 8, 11, 3, 8, 5, 11, 2, 11, 5, 2, 5,
    1, 4, 1, 2, 4, 2, 3, 3, 2, 11, 4, 8, 3, 8, 11, 3, 8, 5, 11, 2, 11, 5, 2, 5,
    1],
  [10, 11, 1, 11, 3, 1, 9, 8, 5, 10, 11, 5, 11, 8, 5, 11, 3, 8, 9, 8, 3, 9,
    3, 1, 10, 1, 9, 10, 9, 5, 5, 9, 8, 10, 11, 5, 11, 8, 5, 11, 3, 8, 9, 8, 3,
    9, 3, 1],
  [3, 4, 8, 3, 8, 10, 3, 10, 11, 8, 5, 10],
  [8, 5, 9, 4, 3, 12, 8, 5, 12, 5, 3, 12, 5, 4, 3, 5, 9, 4],
  [8, 5, 12, 12, 5, 3, 5, 1, 3],
  [2, 1, 10, 4, 3, 12, 9, 8, 5, 2, 1, 10, 4, 5, 9, 4, 3, 5, 8, 5, 3, 8, 3,
    12, 4, 3, 12, 2, 1, 9, 2, 9, 8, 2, 5, 10, 2, 8, 5, 9, 8, 5, 2, 3, 12, 2,
    12, 10, 10, 12, 4, 10, 4, 1, 2, 13, 10, 10, 13, 5, 8, 5, 13, 8, 13, 12, 12,
    13, 3, 4, 3, 13, 4, 13, 9, 9, 13, 1, 2, 1, 13, 2, 13, 10, 2, 13, 3, 12, 13,
    3, 8, 13, 12, 8, 5, 13, 9, 5, 13, 4, 13, 9, 4, 1, 13, 10, 13, 1, 8, 5, 13,
    10, 13, 5, 2, 13, 10, 2, 3, 13, 12, 13, 3, 4, 13, 12, 4, 1, 13, 9, 13, 1,
    9, 8, 13, 2, 3, 12, 2, 12, 5, 2, 5, 10, 8, 5, 12, 4,
    1, 9, 2, 3, 1, 4, 1, 3, 4, 3, 12, 4, 12, 8, 4, 8, 9, 9, 8, 5, 9, 5, 1, 10,
    1, 5, 2, 1, 10],
  [2, 5, 10, 2, 3, 8, 2, 8, 5, 8, 3, 12],
  [4, 2, 12, 2, 11, 12, 8, 5, 9, 4, 2, 9, 2, 5, 9, 2, 11, 5, 8, 5, 11, 8, 11,
    12, 4, 12, 8, 4, 8, 9, 9, 8, 5, 4, 2, 9, 2, 5, 9, 2, 11, 5, 8, 5, 11, 8,
    11, 12],
  [2, 11, 12, 2, 12, 5, 2, 5, 1, 8, 12, 5],
  [8, 5, 12, 5, 10, 12, 4, 1, 9, 12, 10, 11, 8, 4, 9, 8, 12, 4, 4, 11, 12, 4,
    1, 11, 5, 10, 1, 5, 1, 9, 8, 5, 9, 1, 10, 11, 8, 5, 13, 5, 9, 13, 4, 13, 9,
    1, 10, 13, 4, 1, 13, 11, 13, 10, 12, 13, 11, 8, 12, 13, 1, 9, 13, 8, 13, 9,
    8, 5, 13, 5, 10, 13, 11, 13, 10, 12, 11, 13, 4, 13, 12, 4, 1, 13, 8, 5, 9,
    4, 1, 10, 4, 10, 12, 12, 10, 11],
  [8, 5, 12, 5, 10, 12, 12, 10, 11],
  [6, 10, 5],
  [5, 6, 10, 1, 4, 9, 5, 6, 9, 6, 4, 9, 6, 1, 4, 6, 10, 1],
  [1, 5, 2, 5, 6, 2],
  [5, 6, 9, 9, 6, 4, 6, 2, 4],
  [10, 5, 6, 11, 3, 2, 10, 5, 2, 5, 3, 2, 5, 11, 3, 5, 6, 11],
  [6, 10, 5, 2, 11, 3, 1, 4, 9, 6, 10, 5, 2, 9, 1, 2, 11, 9, 4, 9, 11, 4, 11,
    3, 2, 11, 3, 6, 10, 1, 6, 1, 4, 6, 9, 5, 6, 4, 9, 1, 4, 9, 6, 11, 3, 6, 3,
    5, 5, 3, 2, 5, 2, 10, 6, 13, 5, 5, 13, 9, 4, 9, 13, 4, 13, 3, 3, 13, 11, 2,
    11, 13, 2, 13, 1, 1, 13, 10, 6, 10, 13, 6, 13, 5, 6, 13, 11, 3, 13, 11, 4,
    13, 3, 4, 9, 13, 1, 9, 13, 2, 13, 1, 2, 10, 13, 5, 13, 10, 4, 9, 13, 5, 13,
    9, 6, 13, 5, 6, 11, 13, 3, 13, 11, 2, 13, 3, 2, 10, 13, 1, 13, 10, 1, 4,
    13, 6, 11, 3, 6, 3, 9, 6, 9, 5, 4, 9, 3, 2, 10, 1,
    6, 11, 10, 2, 10, 11, 2, 11, 3, 2, 3, 4, 2, 4, 1, 1, 4, 9, 1, 9, 10, 5, 10,
    9, 6, 10, 5],
  [11, 3, 6, 6, 3, 5, 3, 1, 5],
  [6, 9, 5, 6, 11, 4, 6, 4, 9, 4, 11, 3],
  [6, 10, 5, 12, 4, 3, 6, 12, 5, 12, 4, 5, 10, 5, 4, 6, 10, 3, 6, 3, 12, 10,
    4, 3],
  [1, 3, 9, 3, 12, 9, 5, 6, 10, 1, 3, 10, 3, 6, 10, 3, 12, 6, 5, 6, 12, 5,
    12, 9, 1, 9, 5, 1, 5, 10, 10, 5, 6, 1, 3, 10, 3, 6, 10, 3, 12, 6, 5, 6, 12,
    5, 12, 9],
  [1, 5, 2, 5, 6, 2, 3, 12, 4, 1, 5, 4, 5, 12, 4, 5, 6, 12, 3, 12, 6, 3, 6,
    2, 1, 2, 3, 1, 3, 4, 4, 3, 12, 1, 5, 4, 5, 12, 4, 5, 6, 12, 3, 12, 6, 3, 6,
    2],
  [3, 6, 2, 3, 9, 6, 3, 12, 9, 5, 9, 6],
  [11, 12, 2, 12, 4, 2, 10, 5, 6, 11, 12, 6, 12, 5, 6, 12, 4, 5, 10, 5, 4,
    10, 4, 2, 11, 2, 10, 11, 10, 6, 6, 10, 5, 11, 12, 6, 12, 5, 6, 12, 4, 5,
    10, 5, 4, 10, 4, 2],
  [2, 11, 1, 1, 11, 9, 6, 10, 5, 11, 12, 9, 2, 10, 6, 2, 6, 11, 6, 11, 12, 6,
    12, 5, 1, 5, 9, 1, 10, 5, 2, 10, 1, 5, 12, 9, 2, 13, 1, 1, 13, 10, 6, 10,
    13, 5, 13, 9, 6, 13, 5, 12, 9, 13, 11, 12, 13, 2, 13, 11, 5, 13, 10, 2, 10,
    13, 2, 13, 1, 1, 13, 9, 12, 9, 13, 11, 13, 12, 6, 11, 13, 6, 13, 5, 2, 10,
    1, 6, 9, 5, 6, 11, 9, 11, 12, 9],
  [6, 1, 5, 6, 12, 1, 6, 11, 12, 1, 12, 4],
  [5, 6, 9, 6, 11, 9, 9, 11, 12],
  [8, 6, 9, 6, 10, 9],
  [1, 4, 10, 10, 4, 6, 4, 8, 6],
  [9, 8, 1, 1, 8, 2, 8, 6, 2],
  [4, 8, 6, 4, 6, 2],
  [10, 9, 6, 9, 8, 6, 11, 3, 2, 10, 9, 2, 9, 3, 2, 9, 8, 3, 11, 3, 8, 11, 8,
    6, 10, 6, 11, 10, 11, 2, 2, 11, 3, 10, 9, 2, 9, 3, 2, 9, 8, 3, 11, 3, 8,
    11, 8, 6],
  [1, 4, 10, 10, 4, 6, 3, 2, 11, 4, 8, 6, 1, 2, 3, 1, 3, 4, 3, 4, 8, 3, 8,
    11, 10, 11, 6, 10, 2, 11, 1, 2, 10, 11, 8, 6, 1, 13, 10, 10, 13, 2, 3, 2,
    13, 11, 13, 6, 3, 13, 11, 8, 6, 13, 4, 8, 13, 1, 13, 4, 11, 13, 2, 1, 2,
    13, 1, 13, 10, 10, 13, 6, 8, 6, 13, 4, 13, 8, 3, 4, 13, 3, 13, 11, 1, 2,
    10, 3, 6, 11, 3, 4, 6, 4, 8, 6],
  [9, 3, 1, 9, 6, 3, 9, 8, 6, 11, 6, 3],
  [11, 3, 6, 3, 4, 6, 6, 4, 8],
  [8, 6, 9, 6, 10, 9, 4, 3, 12, 8, 6, 12, 6, 3, 12, 6, 10, 3, 4, 3, 10, 4,
    10, 9, 8, 9, 4, 8, 4, 12, 12, 4, 3, 8, 6, 12, 6, 3, 12, 6, 10, 3, 4, 3, 10,
    4, 10, 9],
  [10, 1, 3, 10, 3, 8, 10, 8, 6, 3, 12, 8],
  [9, 8, 1, 1, 8, 2, 12, 4, 3, 8, 6, 2, 9, 4, 12, 9, 12, 8, 12, 8, 6, 12, 6,
    3, 1, 3, 2, 1, 4, 3, 9, 4, 1, 3, 6, 2, 9, 13, 1, 1, 13, 4, 12, 4, 13, 3,
    13, 2, 12, 13, 3, 6, 2, 13, 8, 6, 13, 9, 13, 8, 3, 13, 4, 9, 4, 13, 9, 13,
    1, 1, 13, 2, 6, 2, 13, 8, 13, 6, 12, 8, 13, 12, 13, 3, 9, 4, 1, 12, 2, 3,
    12, 8, 2, 8, 6, 2],
  [3, 12, 2, 12, 8, 2, 2, 8, 6],
  [2, 11, 4, 10, 9, 6, 6, 9, 8, 11, 12, 4, 2, 11, 6, 2, 6, 10, 6, 11, 12, 6,
    12, 8, 4, 12, 9, 9, 12, 8, 2, 10, 9, 2, 9, 4, 2, 10, 13, 2, 13, 4, 4, 13,
    12, 11, 12, 13, 6, 11, 13, 6, 13, 8, 9, 8, 13, 10, 9, 13, 4, 13, 9, 2, 13,
    4, 2, 11, 13, 11, 12, 13, 8, 13, 12, 6, 13, 8, 10, 13, 6, 10, 9, 13, 2, 10,
    4, 10, 9, 4, 6, 11, 12, 6, 12, 8],
  [6, 11, 8, 8, 11, 12, 2, 10, 1, 6, 10, 8, 8, 10, 1, 8, 1, 12, 2, 12, 1, 2,
    11, 12, 6, 2, 11, 6, 10, 2, 10, 1, 2, 6, 10, 8, 8, 10, 1, 8, 1, 12, 2, 12,
    1, 2, 11, 12],
  [12, 8, 11, 11, 8, 6, 9, 4, 1, 12, 4, 11, 11, 4, 1, 11, 1, 6, 9, 6, 1, 9,
    8, 6, 12, 9, 8, 12, 4, 9, 4, 1, 9, 12, 4, 11, 11, 4, 1, 11, 1, 6, 9, 6, 1,
    9, 8, 6],
  [12, 8, 11, 11, 8, 6],
  [6, 7, 11],
  [6, 7, 11, 1, 4, 9, 6, 1, 11, 1, 4, 11, 7, 11, 4, 6, 7, 9, 6, 9, 1, 7, 4, 9],
  [6, 7, 11, 2, 1, 10, 6, 7, 10, 7, 1, 10, 7, 2, 1, 7, 11, 2],
  [2, 4, 10, 4, 9, 10, 6, 7, 11, 2, 4, 11, 4, 7, 11, 4, 9, 7, 6, 7, 9, 6, 9,
    10, 2, 10, 6, 2, 6, 11, 11, 6, 7, 2, 4, 11, 4, 7, 11, 4, 9, 7, 6, 7, 9, 6,
    9, 10],
  [2, 6, 3, 6, 7, 3],
  [2, 6, 3, 6, 7, 3, 4, 9, 1, 2, 6, 1, 6, 9, 1, 6, 7, 9, 4, 9, 7, 4, 7, 3, 2,
    3, 4, 2, 4, 1, 1, 4, 9, 2, 6, 1, 6, 9, 1, 6, 7, 9, 4, 9, 7, 4, 7, 3],
  [6, 7, 10, 10, 7, 1, 7, 3, 1],
  [6, 7, 3, 6, 3, 9, 6, 9, 10, 4, 3, 9],
  [12, 4, 3, 11, 6, 7, 12, 4, 7, 4, 6, 7, 4, 11, 6, 4, 3, 11],
  [12, 9, 3, 9, 1, 3, 11, 6, 7, 12, 9, 7, 9, 6, 7, 9, 1, 6, 11, 6, 1, 11, 1,
    3, 12, 3, 11, 12, 11, 7, 7, 11, 6, 12, 9, 7, 9, 6, 7, 9, 1, 6, 11, 6, 1,
    11, 1, 3],
  [4, 3, 12, 2, 1, 10, 11, 6, 7, 4, 3, 12, 2, 7, 11, 2, 1, 7, 6, 7, 1, 6, 1,
    10, 2, 1, 10, 4, 3, 11, 4, 11, 6, 4, 7, 12, 4, 6, 7, 11, 6, 7, 4, 1, 10, 4,
    10, 12, 12, 10, 2, 12, 2, 3, 4, 13, 12, 12, 13, 7, 6, 7, 13, 6, 13, 10, 10,
    13, 1, 2, 1, 13, 2, 13, 11, 11, 13, 3, 4, 3, 13, 4, 13, 12, 4, 13, 1, 10,
    13, 1, 6, 13, 10, 6, 7, 13, 11, 7, 13, 2, 13, 11, 2, 3, 13, 12, 13, 3, 6,
    7, 13, 12, 13, 7, 4, 13, 12, 4, 1, 13, 10, 13, 1, 2, 13, 10, 2, 3, 13, 11,
    13, 3, 11, 6, 13, 4, 1, 10, 4, 10, 7, 4, 7, 12, 6,
    7, 10, 2, 3, 11, 4, 1, 3, 2, 3, 1, 2, 1, 10, 2, 10, 6, 2, 6, 11, 11, 6, 7,
    11, 7, 3, 12, 3, 7, 4, 3, 12],
  [6, 7, 10, 7, 12, 10, 2, 3, 11, 10, 12, 9, 6, 2, 11, 6, 10, 2, 2, 9, 10, 2,
    3, 9, 7, 12, 3, 7, 3, 11, 6, 7, 11, 3, 12, 9, 6, 7, 13, 7, 11, 13, 2, 13,
    11, 3, 12, 13, 2, 3, 13, 9, 13, 12, 10, 13, 9, 6, 10, 13, 3, 11, 13, 6, 13,
    11, 6, 7, 13, 7, 12, 13, 9, 13, 12, 10, 9, 13, 2, 13, 10, 2, 3, 13, 6, 7,
    11, 2, 3, 12, 2, 12, 10, 10, 12, 9],
  [12, 4, 7, 7, 4, 6, 4, 2, 6],
  [1, 12, 9, 1, 6, 12, 1, 2, 6, 12, 6, 7],
  [4, 7, 12, 4, 1, 6, 4, 6, 7, 6, 1, 10],
  [6, 7, 10, 7, 12, 10, 10, 12, 9],
  [7, 11, 6, 5, 9, 8, 7, 11, 8, 11, 9, 8, 11, 5, 9, 11, 6, 5],
  [5, 1, 8, 1, 4, 8, 7, 11, 6, 5, 1, 6, 1, 11, 6, 1, 4, 11, 7, 11, 4, 7, 4,
    8, 5, 8, 7, 5, 7, 6, 6, 7, 11, 5, 1, 6, 1, 11, 6, 1, 4, 11, 7, 11, 4, 7, 4,
    8],
  [8, 5, 9, 6, 7, 11, 10, 2, 1, 8, 5, 9, 6, 1, 10, 6, 7, 1, 2, 1, 7, 2, 7,
    11, 6, 7, 11, 8, 5, 10, 8, 10, 2, 8, 1, 9, 8, 2, 1, 10, 2, 1, 8, 7, 11, 8,
    11, 9, 9, 11, 6, 9, 6, 5, 8, 13, 9, 9, 13, 1, 2, 1, 13, 2, 13, 11, 11, 13,
    7, 6, 7, 13, 6, 13, 10, 10, 13, 5, 8, 5, 13, 8, 13, 9, 8, 13, 7, 11, 13, 7,
    2, 13, 11, 2, 1, 13, 10, 1, 13, 6, 13, 10, 6, 5, 13, 9, 13, 5, 2, 1, 13, 9,
    13, 1, 8, 13, 9, 8, 7, 13, 11, 13, 7, 6, 13, 11, 6, 5, 13, 10, 13, 5, 10,
    2, 13, 8, 7, 11, 8, 11, 1, 8, 1, 9, 2, 1, 11, 6, 5,
    10, 8, 7, 5, 6, 5, 7, 6, 7, 11, 6, 11, 2, 6, 2, 10, 10, 2, 1, 10, 1, 5, 9,
    5, 1, 8, 5, 9],
  [10, 2, 5, 5, 2, 8, 11, 6, 7, 2, 4, 8, 10, 6, 11, 10, 11, 2, 11, 2, 4, 11,
    4, 7, 5, 7, 8, 5, 6, 7, 10, 6, 5, 7, 4, 8, 10, 13, 5, 5, 13, 6, 11, 6, 13,
    7, 13, 8, 11, 13, 7, 4, 8, 13, 2, 4, 13, 10, 13, 2, 7, 13, 6, 10, 6, 13,
    10, 13, 5, 5, 13, 8, 4, 8, 13, 2, 13, 4, 11, 2, 13, 11, 13, 7, 10, 6, 5,
    11, 8, 7, 11, 2, 8, 2, 4, 8],
  [7, 3, 6, 3, 2, 6, 5, 9, 8, 7, 3, 8, 3, 9, 8, 3, 2, 9, 5, 9, 2, 5, 2, 6, 7,
    6, 5, 7, 5, 8, 8, 5, 9, 7, 3, 8, 3, 9, 8, 3, 2, 9, 5, 9, 2, 5, 2, 6],
  [6, 7, 2, 5, 1, 8, 8, 1, 4, 7, 3, 2, 6, 7, 8, 6, 8, 5, 8, 7, 3, 8, 3, 4, 2,
    3, 1, 1, 3, 4, 6, 5, 1, 6, 1, 2, 6, 5, 13, 6, 13, 2, 2, 13, 3, 7, 3, 13, 8,
    7, 13, 8, 13, 4, 1, 4, 13, 5, 1, 13, 2, 13, 1, 6, 13, 2, 6, 7, 13, 7, 3,
    13, 4, 13, 3, 8, 13, 4, 5, 13, 8, 5, 1, 13, 6, 5, 2, 5, 1, 2, 8, 7, 3, 8,
    3, 4],
  [6, 7, 10, 10, 7, 1, 8, 5, 9, 7, 3, 1, 6, 5, 8, 6, 8, 7, 8, 7, 3, 8, 3, 9,
    10, 9, 1, 10, 5, 9, 6, 5, 10, 9, 3, 1, 6, 13, 10, 10, 13, 5, 8, 5, 13, 9,
    13, 1, 8, 13, 9, 3, 1, 13, 7, 3, 13, 6, 13, 7, 9, 13, 5, 6, 5, 13, 6, 13,
    10, 10, 13, 1, 3, 1, 13, 7, 13, 3, 8, 7, 13, 8, 13, 9, 6, 5, 10, 8, 1, 9,
    8, 7, 1, 7, 3, 1],
  [8, 7, 4, 4, 7, 3, 6, 5, 10, 8, 5, 4, 4, 5, 10, 4, 10, 3, 6, 3, 10, 6, 7,
    3, 8, 6, 7, 8, 5, 6, 5, 10, 6, 8, 5, 4, 4, 5, 10, 4, 10, 3, 6, 3, 10, 6, 7,
    3],
  [6, 7, 11, 8, 5, 9, 12, 4, 3, 6, 7, 11, 8, 3, 12, 8, 5, 3, 4, 3, 5, 4, 5,
    9, 8, 5, 9, 6, 7, 12, 6, 12, 4, 6, 3, 11, 6, 4, 3, 12, 4, 3, 6, 5, 9, 6, 9,
    11, 11, 9, 8, 11, 8, 7, 6, 13, 11, 11, 13, 3, 4, 3, 13, 4, 13, 9, 9, 13, 5,
    8, 5, 13, 8, 13, 12, 12, 13, 7, 6, 7, 13, 6, 13, 11, 6, 13, 5, 9, 13, 5, 4,
    13, 9, 4, 3, 13, 12, 3, 13, 8, 13, 12, 8, 7, 13, 11, 13, 7, 4, 3, 13, 11,
    13, 3, 6, 13, 11, 6, 5, 13, 9, 13, 5, 8, 13, 9, 8, 7, 13, 12, 13, 7, 12, 4,
    13, 6, 5, 9, 6, 9, 3, 6, 3, 11, 4, 3, 9, 8, 7, 12,
    6, 5, 7, 8, 7, 5, 8, 5, 9, 8, 9, 4, 8, 4, 12, 12, 4, 3, 12, 3, 7, 11, 7, 3,
    6, 7, 11],
  [8, 5, 12, 12, 5, 3, 6, 7, 11, 5, 1, 3, 8, 7, 6, 8, 6, 5, 6, 5, 1, 6, 1,
    11, 12, 11, 3, 12, 7, 11, 8, 7, 12, 11, 1, 3, 8, 13, 12, 12, 13, 7, 6, 7,
    13, 11, 13, 3, 6, 13, 11, 1, 3, 13, 5, 1, 13, 8, 13, 5, 11, 13, 7, 8, 7,
    13, 8, 13, 12, 12, 13, 3, 1, 3, 13, 5, 13, 1, 6, 5, 13, 6, 13, 11, 8, 7,
    12, 6, 3, 11, 6, 5, 3, 5, 1, 3],
  [8, 7, 12, 10, 5, 6, 2, 3, 11, 4, 1, 9, 10, 5, 6, 8, 7, 12, 3, 11, 4, 4, 9,
    11, 11, 2, 9, 9, 1, 2, 2, 3, 11, 8, 7, 12, 1, 4, 10, 10, 6, 4, 4, 9, 6, 6,
    5, 9, 4, 1, 9, 2, 3, 11, 5, 10, 8, 8, 12, 10, 10, 6, 12, 12, 7, 6, 4, 1, 9,
    10, 5, 6, 7, 8, 11, 11, 2, 8, 8, 12, 2, 2, 3, 12, 4, 1, 9, 8, 7, 12, 10, 2,
    5, 5, 3, 2, 5, 6, 3, 3, 11, 6, 10, 5, 6, 11, 3, 2, 4, 12, 1, 1, 7, 12, 1,
    9, 7, 7, 8, 9, 8, 7, 12, 13, 5, 6, 13, 9, 5, 13, 4, 9, 13, 3, 4, 13, 11, 3,
    13, 2, 11, 13, 1, 2, 13, 10, 1, 13, 6, 10, 10,
    5, 6, 13, 1, 9, 13, 2, 1, 13, 11, 2, 13, 7, 11, 13, 8, 7, 13, 12, 8, 13, 3,
    12, 13, 4, 3, 13, 9, 4, 8, 7, 12, 13, 4, 9, 13, 3, 4, 13, 11, 3, 13, 6, 11,
    13, 5, 6, 13, 10, 5, 13, 2, 10, 13, 1, 2, 13, 9, 1, 10, 5, 6, 13, 2, 11,
    13, 1, 2, 13, 9, 1, 13, 8, 9, 13, 7, 8, 13, 12, 7, 13, 4, 12, 13, 3, 4, 13,
    11, 3, 2, 3, 11, 13, 7, 12, 13, 6, 7, 13, 10, 6, 13, 1, 10, 13, 4, 1, 13,
    9, 4, 13, 5, 9, 13, 8, 5, 13, 12, 8, 8, 7, 12, 13, 9, 4, 13, 5, 9, 13, 6,
    5, 13, 11, 6, 13, 3, 11, 13, 2, 3, 13, 10, 2, 13, 1,
    10, 13, 4, 1, 2, 3, 11, 13, 10, 6, 13, 1, 10, 13, 4, 1, 13, 12, 4, 13, 7,
    12, 13, 8, 7, 13, 9, 8, 13, 5, 9, 13, 6, 5, 4, 1, 9, 13, 3, 2, 13, 12, 3,
    13, 8, 12, 13, 5, 8, 13, 10, 5, 13, 6, 10, 13, 7, 6, 13, 11, 7, 13, 2, 11,
    4, 1, 9, 13, 8, 12, 13, 5, 8, 13, 10, 5, 13, 2, 10, 13, 3, 2, 13, 11, 3,
    13, 6, 11, 13, 7, 6, 13, 12, 7, 2, 3, 11, 13, 6, 10, 13, 7, 6, 13, 12, 7,
    13, 4, 12, 13, 1, 4, 13, 9, 1, 13, 8, 9, 13, 5, 8, 13, 10, 5, 4, 1, 9, 13,
    12, 8, 13, 3, 12, 13, 2, 3, 13, 10, 2, 13, 5, 10, 13, 6,
    5, 13, 11, 6, 13, 7, 11, 13, 8, 7, 10, 5, 6, 13, 11, 2, 13, 7, 11, 13, 8,
    7, 13, 9, 8, 13, 1, 9, 13, 4, 1, 13, 12, 4, 13, 3, 12, 13, 2, 3, 13, 5, 6,
    13, 9, 5, 13, 8, 9, 13, 7, 8, 13, 12, 7, 13, 4, 12, 13, 3, 4, 13, 11, 3,
    13, 2, 11, 13, 1, 2, 13, 10, 1, 13, 6, 10, 13, 7, 11, 13, 8, 7, 13, 12, 8,
    13, 3, 12, 13, 4, 3, 13, 9, 4, 13, 1, 9, 13, 2, 1, 13, 10, 2, 13, 5, 10,
    13, 6, 5, 13, 11, 6, 13, 1, 10, 13, 4, 1, 13, 9, 4, 13, 5, 9, 13, 8, 5, 13,
    12, 8, 13, 7, 12, 13, 6, 7, 13, 11, 6, 13, 3, 11, 13, 2,
    3, 13, 10, 2, 13, 3, 2, 13, 12, 3, 13, 4, 12, 13, 1, 4, 13, 9, 1, 13, 8, 9,
    13, 5, 8, 13, 10, 5, 13, 6, 10, 13, 7, 6, 13, 11, 7, 13, 2, 11, 8, 7, 12,
    10, 1, 2, 6, 5, 11, 11, 9, 5, 11, 3, 9, 9, 4, 3, 6, 5, 10, 12, 3, 4, 11, 7,
    2, 2, 8, 7, 2, 1, 8, 8, 9, 1, 2, 3, 11, 9, 5, 8, 10, 1, 6, 6, 4, 1, 6, 7,
    4, 4, 12, 7, 4, 1, 9, 11, 7, 6, 2, 3, 10, 10, 12, 3, 10, 5, 12, 12, 8, 5,
    2, 1, 10, 12, 3, 4, 12, 11, 3, 12, 7, 11, 11, 6, 7, 7, 5, 6, 7, 8, 5, 5, 9,
    8, 8, 12, 9, 9, 4, 12, 12, 3, 4, 6, 7, 11, 6, 8, 7,
    6, 5, 8, 8, 9, 5, 5, 1, 9, 5, 10, 1, 1, 2, 10, 10, 6, 2, 2, 11, 6, 9, 5, 8,
    2, 1, 10, 2, 4, 1, 2, 3, 4, 4, 12, 3, 3, 7, 12, 3, 11, 7, 7, 6, 11, 11, 2,
    6, 6, 10, 2, 6, 7, 11, 9, 5, 8, 9, 10, 5, 9, 1, 10, 10, 2, 1, 1, 3, 2, 1,
    4, 3, 4, 12, 3, 4, 9, 12, 12, 8, 9],
  [12, 8, 7, 11, 2, 3, 6, 5, 10, 12, 8, 7, 11, 6, 5, 11, 5, 3, 10, 3, 5, 10,
    2, 3, 11, 2, 3, 12, 6, 7, 12, 10, 6, 12, 8, 5, 12, 5, 10, 6, 5, 10, 12, 2,
    3, 12, 8, 2, 8, 11, 2, 8, 7, 11, 12, 8, 13, 8, 5, 13, 10, 13, 5, 10, 2, 13,
    2, 3, 13, 11, 13, 3, 11, 6, 13, 6, 7, 13, 12, 13, 7, 12, 8, 13, 12, 3, 13,
    2, 3, 13, 10, 2, 13, 10, 13, 5, 6, 13, 5, 11, 6, 13, 11, 13, 7, 8, 7, 13,
    10, 13, 5, 8, 5, 13, 12, 8, 13, 12, 13, 3, 2, 3, 13, 11, 2, 13, 11, 13, 7,
    6, 7, 13, 6, 13, 10, 12, 2, 3, 12, 5, 2, 12, 8, 5,
    10, 2, 5, 11, 6, 7, 12, 7, 3, 11, 3, 7, 11, 2, 3, 11, 10, 2, 11, 6, 10, 6,
    5, 10, 6, 7, 5, 8, 5, 7, 12, 8, 7],
  [12, 4, 7, 7, 4, 6, 9, 8, 5, 4, 2, 6, 12, 8, 9, 12, 9, 4, 9, 4, 2, 9, 2, 5,
    7, 5, 6, 7, 8, 5, 12, 8, 7, 5, 2, 6, 12, 13, 7, 7, 13, 8, 9, 8, 13, 5, 13,
    6, 9, 13, 5, 2, 6, 13, 4, 2, 13, 12, 13, 4, 5, 13, 8, 12, 8, 13, 12, 13, 7,
    7, 13, 6, 2, 6, 13, 4, 13, 2, 9, 4, 13, 9, 13, 5, 12, 8, 7, 9, 6, 5, 9, 4,
    6, 4, 2, 6],
  [6, 5, 2, 2, 5, 1, 8, 7, 12, 6, 7, 2, 2, 7, 12, 2, 12, 1, 8, 1, 12, 8, 5,
    1, 6, 8, 5, 6, 7, 8, 7, 12, 8, 6, 7, 2, 2, 7, 12, 2, 12, 1, 8, 1, 12, 8, 5,
    1],
  [7, 12, 8, 5, 10, 6, 9, 4, 1, 7, 12, 8, 5, 9, 4, 5, 4, 6, 1, 6, 4, 1, 10,
    6, 5, 10, 6, 7, 9, 8, 7, 1, 9, 7, 12, 4, 7, 4, 1, 9, 4, 1, 7, 10, 6, 7, 12,
    10, 12, 5, 10, 12, 8, 5, 7, 12, 13, 12, 4, 13, 1, 13, 4, 1, 10, 13, 10, 6,
    13, 5, 13, 6, 5, 9, 13, 9, 8, 13, 7, 13, 8, 7, 12, 13, 7, 6, 13, 10, 6, 13,
    1, 10, 13, 1, 13, 4, 9, 13, 4, 5, 9, 13, 5, 13, 8, 12, 8, 13, 1, 13, 4, 12,
    4, 13, 7, 12, 13, 7, 13, 6, 10, 6, 13, 5, 10, 13, 5, 13, 8, 9, 8, 13, 9,
    13, 1, 7, 10, 6, 7, 4, 10, 7, 12, 4, 1, 10, 4, 5,
    9, 8, 7, 8, 6, 5, 6, 8, 5, 10, 6, 5, 1, 10, 5, 9, 1, 9, 4, 1, 9, 8, 4, 12,
    4, 8, 7, 12, 8],
  [8, 7, 12, 6, 5, 10, 8, 5, 12, 12, 5, 10, 12, 10, 6, 12, 6, 7],
  [5, 7, 10, 7, 11, 10],
  [5, 7, 10, 7, 11, 10, 1, 4, 9, 5, 7, 9, 7, 4, 9, 7, 11, 4, 1, 4, 11, 1, 11,
    10, 5, 10, 1, 5, 1, 9, 9, 1, 4, 5, 7, 9, 7, 4, 9, 7, 11, 4, 1, 4, 11, 1,
    11, 10],
  [2, 1, 11, 11, 1, 7, 1, 5, 7],
  [9, 5, 7, 9, 7, 2, 9, 2, 4, 7, 11, 2],
  [10, 5, 2, 2, 5, 3, 5, 7, 3],
  [4, 9, 3, 9, 5, 3, 2, 10, 1, 3, 5, 7, 4, 2, 1, 4, 3, 2, 2, 7, 3, 2, 10, 7,
    9, 5, 10, 9, 10, 1, 4, 9, 1, 10, 5, 7, 4, 9, 13, 9, 1, 13, 2, 13, 1, 10, 5,
    13, 2, 10, 13, 7, 13, 5, 3, 13, 7, 4, 3, 13, 10, 1, 13, 4, 13, 1, 4, 9, 13,
    9, 5, 13, 7, 13, 5, 3, 7, 13, 2, 13, 3, 2, 10, 13, 4, 9, 1, 2, 10, 5, 2, 5,
    3, 3, 5, 7],
  [3, 1, 5, 3, 5, 7],
  [4, 9, 3, 9, 5, 3, 3, 5, 7],
  [11, 10, 7, 10, 5, 7, 12, 4, 3, 11, 10, 3, 10, 4, 3, 10, 5, 4, 12, 4, 5,
    12, 5, 7, 11, 7, 12, 11, 12, 3, 3, 12, 4, 11, 10, 3, 10, 4, 3, 10, 5, 4,
    12, 4, 5, 12, 5, 7],
  [9, 1, 12, 5, 7, 10, 10, 7, 11, 1, 3, 12, 9, 1, 10, 9, 10, 5, 10, 1, 3, 10,
    3, 11, 12, 3, 7, 7, 3, 11, 9, 5, 7, 9, 7, 12, 9, 5, 13, 9, 13, 12, 12, 13,
    3, 1, 3, 13, 10, 1, 13, 10, 13, 11, 7, 11, 13, 5, 7, 13, 12, 13, 7, 9, 13,
    12, 9, 1, 13, 1, 3, 13, 11, 13, 3, 10, 13, 11, 5, 13, 10, 5, 7, 13, 9, 5,
    12, 5, 7, 12, 10, 1, 3, 10, 3, 11],
  [2, 1, 11, 11, 1, 7, 4, 3, 12, 1, 5, 7, 2, 3, 4, 2, 4, 1, 4, 1, 5, 4, 5,
    12, 11, 12, 7, 11, 3, 12, 2, 3, 11, 12, 5, 7, 2, 13, 11, 11, 13, 3, 4, 3,
    13, 12, 13, 7, 4, 13, 12, 5, 7, 13, 1, 5, 13, 2, 13, 1, 12, 13, 3, 2, 3,
    13, 2, 13, 11, 11, 13, 7, 5, 7, 13, 1, 13, 5, 4, 1, 13, 4, 13, 12, 2, 3,
    11, 4, 7, 12, 4, 1, 7, 1, 5, 7],
  [7, 12, 5, 5, 12, 9, 3, 11, 2, 7, 11, 5, 5, 11, 2, 5, 2, 9, 3, 9, 2, 3, 12,
    9, 7, 3, 12, 7, 11, 3, 11, 2, 3, 7, 11, 5, 5, 11, 2, 5, 2, 9, 3, 9, 2, 3,
    12, 9],
  [10, 5, 7, 10, 7, 4, 10, 4, 2, 12, 7, 4],
  [9, 5, 12, 12, 5, 7, 10, 1, 2, 9, 1, 12, 12, 1, 2, 12, 2, 7, 10, 7, 2, 10,
    5, 7, 9, 10, 5, 9, 1, 10, 1, 2, 10, 9, 1, 12, 12, 1, 2, 12, 2, 7, 10, 7, 2,
    10, 5, 7],
  [12, 4, 7, 4, 1, 7, 7, 1, 5],
  [9, 5, 12, 12, 5, 7],
  [7, 11, 8, 8, 11, 9, 11, 10, 9],
  [1, 11, 10, 1, 8, 11, 1, 4, 8, 7, 8, 11],
  [8, 1, 9, 8, 7, 2, 8, 2, 1, 2, 7, 11],
  [7, 11, 8, 11, 2, 8, 8, 2, 4],
  [2, 10, 9, 2, 9, 7, 2, 7, 3, 9, 8, 7],
  [3, 4, 7, 7, 4, 8, 1, 2, 10, 3, 2, 7, 7, 2, 10, 7, 10, 8, 1, 8, 10, 1, 4,
    8, 3, 1, 4, 3, 2, 1, 2, 10, 1, 3, 2, 7, 7, 2, 10, 7, 10, 8, 1, 8, 10, 1, 4,
    8],
  [9, 8, 1, 8, 7, 1, 1, 7, 3],
  [8, 7, 4, 4, 7, 3],
  [4, 3, 9, 3, 11, 9, 8, 7, 12, 9, 11, 10, 4, 8, 12, 4, 9, 8, 8, 10, 9, 8, 7,
    10, 3, 11, 7, 3, 7, 12, 4, 3, 12, 7, 11, 10, 4, 3, 13, 3, 12, 13, 8, 13,
    12, 7, 11, 13, 8, 7, 13, 10, 13, 11, 9, 13, 10, 4, 9, 13, 7, 12, 13, 4, 13,
    12, 4, 3, 13, 3, 11, 13, 10, 13, 11, 9, 10, 13, 8, 13, 9, 8, 7, 13, 4, 3,
    12, 8, 7, 11, 8, 11, 9, 9, 11, 10],
  [3, 11, 1, 1, 11, 10, 7, 12, 8, 3, 12, 1, 1, 12, 8, 1, 8, 10, 7, 10, 8, 7,
    11, 10, 3, 7, 11, 3, 12, 7, 12, 8, 7, 3, 12, 1, 1, 12, 8, 1, 8, 10, 7, 10,
    8, 7, 11, 10],
  [8, 7, 12, 4, 1, 9, 3, 11, 2, 8, 7, 12, 4, 3, 11, 4, 11, 9, 2, 9, 11, 2, 1,
    9, 4, 1, 9, 8, 3, 12, 8, 2, 3, 8, 7, 11, 8, 11, 2, 3, 11, 2, 8, 1, 9, 8, 7,
    1, 7, 4, 1, 7, 12, 4, 8, 7, 13, 7, 11, 13, 2, 13, 11, 2, 1, 13, 1, 9, 13,
    4, 13, 9, 4, 3, 13, 3, 12, 13, 8, 13, 12, 8, 7, 13, 8, 9, 13, 1, 9, 13, 2,
    1, 13, 2, 13, 11, 3, 13, 11, 4, 3, 13, 4, 13, 12, 7, 12, 13, 2, 13, 11, 7,
    11, 13, 8, 7, 13, 8, 13, 9, 1, 9, 13, 4, 1, 13, 4, 13, 12, 3, 12, 13, 3,
    13, 2, 8, 1, 9, 8, 11, 1, 8, 7, 11, 2, 1, 11, 4, 3,
    12, 8, 12, 9, 4, 9, 12, 4, 1, 9, 4, 2, 1, 4, 3, 2, 3, 11, 2, 3, 12, 11, 7,
    11, 12, 8, 7, 12],
  [3, 11, 2, 7, 12, 8, 3, 12, 2, 2, 12, 8, 2, 8, 7, 2, 7, 11],
  [9, 4, 10, 10, 4, 2, 12, 8, 7, 9, 8, 10, 10, 8, 7, 10, 7, 2, 12, 2, 7, 12,
    4, 2, 9, 12, 4, 9, 8, 12, 8, 7, 12, 9, 8, 10, 10, 8, 7, 10, 7, 2, 12, 2, 7,
    12, 4, 2],
  [8, 7, 12, 10, 1, 2, 8, 7, 10, 10, 7, 2, 12, 2, 7, 8, 1, 12, 8, 10, 1, 12,
    1, 2],
  [9, 4, 1, 12, 8, 7, 9, 8, 1, 1, 8, 7, 1, 7, 12, 1, 12, 4],
  [8, 7, 12],
  [8, 12, 7],
  [9, 1, 4, 12, 7, 8, 9, 1, 8, 1, 7, 8, 1, 12, 7, 1, 4, 12],
  [8, 12, 7, 10, 2, 1, 8, 10, 7, 10, 2, 7, 12, 7, 2, 8, 12, 1, 8, 1, 10, 12,
    2, 1],
  [9, 10, 4, 10, 2, 4, 12, 7, 8, 9, 10, 8, 10, 7, 8, 10, 2, 7, 12, 7, 2, 12,
    2, 4, 9, 4, 12, 9, 12, 8, 8, 12, 7, 9, 10, 8, 10, 7, 8, 10, 2, 7, 12, 7, 2,
    12, 2, 4],
  [3, 2, 11, 7, 8, 12, 3, 2, 12, 2, 8, 12, 2, 7, 8, 2, 11, 7],
  [8, 12, 7, 4, 9, 1, 3, 2, 11, 8, 12, 7, 4, 11, 3, 4, 9, 11, 2, 11, 9, 2, 9,
    1, 4, 9, 1, 8, 12, 3, 8, 3, 2, 8, 11, 7, 8, 2, 11, 3, 2, 11, 8, 9, 1, 8, 1,
    7, 7, 1, 4, 7, 4, 12, 8, 13, 7, 7, 13, 11, 2, 11, 13, 2, 13, 1, 1, 13, 9,
    4, 9, 13, 4, 13, 3, 3, 13, 12, 8, 12, 13, 8, 13, 7, 8, 13, 9, 1, 13, 9, 2,
    13, 1, 2, 11, 13, 3, 11, 13, 4, 13, 3, 4, 12, 13, 7, 13, 12, 2, 11, 13, 7,
    13, 11, 8, 13, 7, 8, 9, 13, 1, 13, 9, 4, 13, 1, 4, 12, 13, 3, 13, 12, 3, 2,
    13, 8, 9, 1, 8, 1, 11, 8, 11, 7, 2, 11, 1, 4, 12,
    3, 8, 9, 12, 4, 12, 9, 4, 9, 1, 4, 1, 2, 4, 2, 3, 3, 2, 11, 3, 11, 12, 7,
    12, 11, 8, 12, 7],
  [3, 1, 11, 1, 10, 11, 7, 8, 12, 3, 1, 12, 1, 8, 12, 1, 10, 8, 7, 8, 10, 7,
    10, 11, 3, 11, 7, 3, 7, 12, 12, 7, 8, 3, 1, 12, 1, 8, 12, 1, 10, 8, 7, 8,
    10, 7, 10, 11],
  [4, 9, 3, 3, 9, 11, 8, 12, 7, 9, 10, 11, 4, 12, 8, 4, 8, 9, 8, 9, 10, 8,
    10, 7, 3, 7, 11, 3, 12, 7, 4, 12, 3, 7, 10, 11, 4, 13, 3, 3, 13, 12, 8, 12,
    13, 7, 13, 11, 8, 13, 7, 10, 11, 13, 9, 10, 13, 4, 13, 9, 7, 13, 12, 4, 12,
    13, 4, 13, 3, 3, 13, 11, 10, 11, 13, 9, 13, 10, 8, 9, 13, 8, 13, 7, 4, 12,
    3, 8, 11, 7, 8, 9, 11, 9, 10, 11],
  [8, 4, 7, 4, 3, 7],
  [9, 1, 8, 8, 1, 7, 1, 3, 7],
  [3, 7, 4, 7, 8, 4, 1, 10, 2, 3, 7, 2, 7, 10, 2, 7, 8, 10, 1, 10, 8, 1, 8,
    4, 3, 4, 1, 3, 1, 2, 2, 1, 10, 3, 7, 2, 7, 10, 2, 7, 8, 10, 1, 10, 8, 1, 8,
    4],
  [2, 9, 10, 2, 7, 9, 2, 3, 7, 9, 7, 8],
  [7, 8, 11, 11, 8, 2, 8, 4, 2],
  [8, 9, 1, 8, 2, 7, 8, 1, 2, 2, 11, 7],
  [1, 10, 11, 1, 11, 8, 1, 8, 4, 7, 11, 8],
  [7, 8, 11, 8, 9, 11, 11, 9, 10],
  [9, 12, 5, 12, 7, 5],
  [12, 7, 4, 4, 7, 1, 7, 5, 1],
  [9, 12, 5, 12, 7, 5, 10, 2, 1, 9, 12, 1, 12, 2, 1, 12, 7, 2, 10, 2, 7, 10,
    7, 5, 9, 5, 10, 9, 10, 1, 1, 10, 2, 9, 12, 1, 12, 2, 1, 12, 7, 2, 10, 2, 7,
    10, 7, 5],
  [10, 7, 5, 10, 4, 7, 10, 2, 4, 12, 4, 7],
  [7, 5, 12, 5, 9, 12, 3, 2, 11, 7, 5, 11, 5, 2, 11, 5, 9, 2, 3, 2, 9, 3, 9,
    12, 7, 12, 3, 7, 3, 11, 11, 3, 2, 7, 5, 11, 5, 2, 11, 5, 9, 2, 3, 2, 9, 3,
    9, 12],
  [2, 11, 1, 11, 7, 1, 4, 12, 3, 1, 7, 5, 2, 4, 3, 2, 1, 4, 4, 5, 1, 4, 12,
    5, 11, 7, 12, 11, 12, 3, 2, 11, 3, 12, 7, 5, 2, 11, 13, 11, 3, 13, 4, 13,
    3, 12, 7, 13, 4, 12, 13, 5, 13, 7, 1, 13, 5, 2, 1, 13, 12, 3, 13, 2, 13, 3,
    2, 11, 13, 11, 7, 13, 5, 13, 7, 1, 5, 13, 4, 13, 1, 4, 12, 13, 2, 11, 3, 4,
    12, 7, 4, 7, 1, 1, 7, 5],
  [9, 12, 1, 5, 10, 7, 10, 11, 7, 1, 12, 3, 9, 10, 1, 9, 5, 10, 10, 3, 1, 10,
    11, 3, 12, 7, 3, 7, 11, 3, 9, 7, 5, 9, 12, 7, 9, 13, 5, 9, 12, 13, 12, 3,
    13, 1, 13, 3, 10, 13, 1, 10, 11, 13, 7, 13, 11, 5, 13, 7, 12, 7, 13, 9, 12,
    13, 9, 13, 1, 1, 13, 3, 11, 3, 13, 10, 11, 13, 5, 10, 13, 5, 13, 7, 9, 12,
    5, 5, 12, 7, 10, 3, 1, 10, 11, 3],
  [11, 7, 10, 10, 7, 5, 12, 3, 4, 11, 3, 10, 10, 3, 4, 10, 4, 5, 12, 5, 4,
    12, 7, 5, 11, 12, 7, 11, 3, 12, 3, 4, 12, 11, 3, 10, 10, 3, 4, 10, 4, 5,
    12, 5, 4, 12, 7, 5],
  [4, 3, 9, 9, 3, 5, 3, 7, 5],
  [3, 5, 1, 3, 7, 5],
  [4, 3, 9, 9, 3, 5, 2, 1, 10, 3, 7, 5, 4, 1, 2, 4, 2, 3, 2, 3, 7, 2, 7, 10,
    9, 10, 5, 9, 1, 10, 4, 1, 9, 10, 7, 5, 4, 13, 9, 9, 13, 1, 2, 1, 13, 10,
    13, 5, 2, 13, 10, 7, 5, 13, 3, 7, 13, 4, 13, 3, 10, 13, 1, 4, 1, 13, 4, 13,
    9, 9, 13, 5, 7, 5, 13, 3, 13, 7, 2, 3, 13, 2, 13, 10, 4, 1, 9, 2, 5, 10, 2,
    3, 5, 3, 7, 5],
  [10, 2, 5, 2, 3, 5, 5, 3, 7],
  [9, 7, 5, 9, 2, 7, 9, 4, 2, 7, 2, 11],
  [2, 11, 1, 11, 7, 1, 1, 7, 5],
  [5, 10, 7, 7, 10, 11, 1, 9, 4, 5, 9, 7, 7, 9, 4, 7, 4, 11, 1, 11, 4, 1, 10,
    11, 5, 1, 10, 5, 9, 1, 9, 4, 1, 5, 9, 7, 7, 9, 4, 7, 4, 11, 1, 11, 4, 1,
    10, 11],
  [5, 10, 7, 7, 10, 11],
  [8, 12, 7, 6, 10, 5, 8, 12, 5, 12, 10, 5, 12, 6, 10, 12, 7, 6],
  [7, 8, 12, 5, 6, 10, 9, 1, 4, 7, 8, 12, 5, 4, 9, 5, 6, 4, 1, 4, 6, 1, 6,
    10, 5, 6, 10, 7, 8, 9, 7, 9, 1, 7, 4, 12, 7, 1, 4, 9, 1, 4, 7, 6, 10, 7,
    10, 12, 12, 10, 5, 12, 5, 8, 7, 13, 12, 12, 13, 4, 1, 4, 13, 1, 13, 10, 10,
    13, 6, 5, 6, 13, 5, 13, 9, 9, 13, 8, 7, 8, 13, 7, 13, 12, 7, 13, 6, 10, 13,
    6, 1, 13, 10, 1, 4, 13, 9, 4, 13, 5, 13, 9, 5, 8, 13, 12, 13, 8, 1, 4, 13,
    12, 13, 4, 7, 13, 12, 7, 6, 13, 10, 13, 6, 5, 13, 10, 5, 8, 13, 9, 13, 8,
    9, 1, 13, 7, 6, 10, 7, 10, 4, 7, 4, 12, 1, 4, 10, 5,
    8, 9, 7, 6, 8, 5, 8, 6, 5, 6, 10, 5, 10, 1, 5, 1, 9, 9, 1, 4, 9, 4, 8, 12,
    8, 4, 7, 8, 12],
  [6, 2, 5, 2, 1, 5, 8, 12, 7, 6, 2, 7, 2, 12, 7, 2, 1, 12, 8, 12, 1, 8, 1,
    5, 6, 5, 8, 6, 8, 7, 7, 8, 12, 6, 2, 7, 2, 12, 7, 2, 1, 12, 8, 12, 1, 8, 1,
    5],
  [12, 7, 4, 7, 6, 4, 9, 5, 8, 4, 6, 2, 12, 9, 8, 12, 4, 9, 9, 2, 4, 9, 5, 2,
    7, 6, 5, 7, 5, 8, 12, 7, 8, 5, 6, 2, 12, 7, 13, 7, 8, 13, 9, 13, 8, 5, 6,
    13, 9, 5, 13, 2, 13, 6, 4, 13, 2, 12, 4, 13, 5, 8, 13, 12, 13, 8, 12, 7,
    13, 7, 6, 13, 2, 13, 6, 4, 2, 13, 9, 13, 4, 9, 5, 13, 12, 7, 8, 9, 5, 6, 9,
    6, 4, 4, 6, 2],
  [12, 7, 8, 11, 3, 2, 6, 10, 5, 12, 7, 8, 11, 5, 6, 11, 3, 5, 10, 5, 3, 10,
    3, 2, 11, 3, 2, 12, 7, 6, 12, 6, 10, 12, 5, 8, 12, 10, 5, 6, 10, 5, 12, 3,
    2, 12, 2, 8, 8, 2, 11, 8, 11, 7, 12, 13, 8, 8, 13, 5, 10, 5, 13, 10, 13, 2,
    2, 13, 3, 11, 3, 13, 11, 13, 6, 6, 13, 7, 12, 7, 13, 12, 13, 8, 12, 13, 3,
    2, 13, 3, 10, 13, 2, 10, 5, 13, 6, 5, 13, 11, 13, 6, 11, 7, 13, 8, 13, 7,
    10, 5, 13, 8, 13, 5, 12, 13, 8, 12, 3, 13, 2, 13, 3, 11, 13, 2, 11, 7, 13,
    6, 13, 7, 6, 10, 13, 12, 3, 2, 12, 2, 5, 12, 5, 8,
    10, 5, 2, 11, 7, 6, 12, 3, 7, 11, 7, 3, 11, 3, 2, 11, 2, 10, 11, 10, 6, 6,
    10, 5, 6, 5, 7, 8, 7, 5, 12, 7, 8],
  [8, 12, 7, 10, 6, 5, 2, 11, 3, 4, 9, 1, 10, 6, 5, 8, 12, 7, 3, 4, 11, 4,
    11, 9, 11, 9, 2, 9, 2, 1, 2, 11, 3, 8, 12, 7, 1, 10, 4, 10, 4, 6, 4, 6, 9,
    6, 9, 5, 4, 9, 1, 2, 11, 3, 5, 8, 10, 8, 10, 12, 10, 12, 6, 12, 6, 7, 4, 9,
    1, 10, 6, 5, 7, 11, 8, 11, 8, 2, 8, 2, 12, 2, 12, 3, 4, 9, 1, 8, 12, 7, 10,
    5, 2, 5, 2, 3, 5, 3, 6, 3, 6, 11, 10, 6, 5, 11, 2, 3, 4, 1, 12, 1, 12, 7,
    1, 7, 9, 7, 9, 8, 8, 12, 7, 13, 6, 5, 13, 5, 9, 13, 9, 4, 13, 4, 3, 13, 3,
    11, 13, 11, 2, 13, 2, 1, 13, 1, 10, 13, 10, 6, 10,
    6, 5, 13, 9, 1, 13, 1, 2, 13, 2, 11, 13, 11, 7, 13, 7, 8, 13, 8, 12, 13,
    12, 3, 13, 3, 4, 13, 4, 9, 8, 12, 7, 13, 9, 4, 13, 4, 3, 13, 3, 11, 13, 11,
    6, 13, 6, 5, 13, 5, 10, 13, 10, 2, 13, 2, 1, 13, 1, 9, 10, 6, 5, 13, 11, 2,
    13, 2, 1, 13, 1, 9, 13, 9, 8, 13, 8, 7, 13, 7, 12, 13, 12, 4, 13, 4, 3, 13,
    3, 11, 2, 11, 3, 13, 12, 7, 13, 7, 6, 13, 6, 10, 13, 10, 1, 13, 1, 4, 13,
    4, 9, 13, 9, 5, 13, 5, 8, 13, 8, 12, 8, 12, 7, 13, 4, 9, 13, 9, 5, 13, 5,
    6, 13, 6, 11, 13, 11, 3, 13, 3, 2, 13, 2, 10, 13, 10,
    1, 13, 1, 4, 2, 11, 3, 13, 6, 10, 13, 10, 1, 13, 1, 4, 13, 4, 12, 13, 12,
    7, 13, 7, 8, 13, 8, 9, 13, 9, 5, 13, 5, 6, 4, 9, 1, 13, 2, 3, 13, 3, 12,
    13, 12, 8, 13, 8, 5, 13, 5, 10, 13, 10, 6, 13, 6, 7, 13, 7, 11, 13, 11, 2,
    4, 9, 1, 13, 12, 8, 13, 8, 5, 13, 5, 10, 13, 10, 2, 13, 2, 3, 13, 3, 11,
    13, 11, 6, 13, 6, 7, 13, 7, 12, 2, 11, 3, 13, 10, 6, 13, 6, 7, 13, 7, 12,
    13, 12, 4, 13, 4, 1, 13, 1, 9, 13, 9, 8, 13, 8, 5, 13, 5, 10, 4, 9, 1, 13,
    8, 12, 13, 12, 3, 13, 3, 2, 13, 2, 10, 13, 10, 5, 13, 5,
    6, 13, 6, 11, 13, 11, 7, 13, 7, 8, 10, 6, 5, 13, 2, 11, 13, 11, 7, 13, 7,
    8, 13, 8, 9, 13, 9, 1, 13, 1, 4, 13, 4, 12, 13, 12, 3, 13, 3, 2, 13, 6, 5,
    13, 5, 9, 13, 9, 8, 13, 8, 7, 13, 7, 12, 13, 12, 4, 13, 4, 3, 13, 3, 11,
    13, 11, 2, 13, 2, 1, 13, 1, 10, 13, 10, 6, 13, 11, 7, 13, 7, 8, 13, 8, 12,
    13, 12, 3, 13, 3, 4, 13, 4, 9, 13, 9, 1, 13, 1, 2, 13, 2, 10, 13, 10, 5,
    13, 5, 6, 13, 6, 11, 13, 10, 1, 13, 1, 4, 13, 4, 9, 13, 9, 5, 13, 5, 8, 13,
    8, 12, 13, 12, 7, 13, 7, 6, 13, 6, 11, 13, 11, 3, 13, 3,
    2, 13, 2, 10, 13, 2, 3, 13, 3, 12, 13, 12, 4, 13, 4, 1, 13, 1, 9, 13, 9, 8,
    13, 8, 5, 13, 5, 10, 13, 10, 6, 13, 6, 7, 13, 7, 11, 13, 11, 2, 8, 12, 7,
    10, 2, 1, 6, 11, 5, 11, 5, 9, 11, 9, 3, 9, 3, 4, 6, 10, 5, 12, 4, 3, 11, 2,
    7, 2, 7, 8, 2, 8, 1, 8, 1, 9, 2, 11, 3, 9, 8, 5, 10, 6, 1, 6, 1, 4, 6, 4,
    7, 4, 7, 12, 4, 9, 1, 11, 6, 7, 2, 10, 3, 10, 3, 12, 10, 12, 5, 12, 5, 8,
    2, 10, 1, 12, 4, 3, 12, 3, 11, 12, 11, 7, 11, 7, 6, 7, 6, 5, 7, 5, 8, 5, 8,
    9, 8, 9, 12, 9, 12, 4, 12, 4, 3, 6, 11, 7, 6, 7, 8,
    6, 8, 5, 8, 5, 9, 5, 9, 1, 5, 1, 10, 1, 10, 2, 10, 2, 6, 2, 6, 11, 9, 8, 5,
    2, 10, 1, 2, 1, 4, 2, 4, 3, 4, 3, 12, 3, 12, 7, 3, 7, 11, 7, 11, 6, 11, 6,
    2, 6, 2, 10, 6, 11, 7, 9, 8, 5, 9, 5, 10, 9, 10, 1, 10, 1, 2, 1, 2, 3, 1,
    3, 4, 4, 3, 12, 4, 12, 9, 12, 9, 8],
  [8, 12, 5, 12, 3, 5, 6, 11, 7, 5, 3, 1, 8, 6, 7, 8, 5, 6, 6, 1, 5, 6, 11,
    1, 12, 3, 11, 12, 11, 7, 8, 12, 7, 11, 3, 1, 8, 12, 13, 12, 7, 13, 6, 13,
    7, 11, 3, 13, 6, 11, 13, 1, 13, 3, 5, 13, 1, 8, 5, 13, 11, 7, 13, 8, 13, 7,
    8, 12, 13, 12, 3, 13, 1, 13, 3, 5, 1, 13, 6, 13, 5, 6, 11, 13, 8, 12, 7, 6,
    11, 3, 6, 3, 5, 5, 3, 1],
  [6, 11, 7, 8, 9, 5, 12, 3, 4, 6, 11, 7, 8, 12, 3, 8, 3, 5, 4, 5, 3, 4, 9,
    5, 8, 9, 5, 6, 12, 7, 6, 4, 12, 6, 11, 3, 6, 3, 4, 12, 3, 4, 6, 9, 5, 6,
    11, 9, 11, 8, 9, 11, 7, 8, 6, 11, 13, 11, 3, 13, 4, 13, 3, 4, 9, 13, 9, 5,
    13, 8, 13, 5, 8, 12, 13, 12, 7, 13, 6, 13, 7, 6, 11, 13, 6, 5, 13, 9, 5,
    13, 4, 9, 13, 4, 13, 3, 12, 13, 3, 8, 12, 13, 8, 13, 7, 11, 7, 13, 4, 13,
    3, 11, 3, 13, 6, 11, 13, 6, 13, 5, 9, 5, 13, 8, 9, 13, 8, 13, 7, 12, 7, 13,
    12, 13, 4, 6, 9, 5, 6, 3, 9, 6, 11, 3, 4, 9, 3, 8, 12,
    7, 6, 7, 5, 8, 5, 7, 8, 9, 5, 8, 4, 9, 8, 12, 4, 12, 3, 4, 12, 7, 3, 11, 3,
    7, 6, 11, 7],
  [8, 4, 7, 4, 3, 7, 6, 10, 5, 8, 4, 5, 4, 10, 5, 4, 3, 10, 6, 10, 3, 6, 3,
    7, 8, 7, 6, 8, 6, 5, 5, 6, 10, 8, 4, 5, 4, 10, 5, 4, 3, 10, 6, 10, 3, 6, 3,
    7],
  [6, 10, 7, 10, 1, 7, 8, 9, 5, 7, 1, 3, 6, 8, 5, 6, 7, 8, 8, 3, 7, 8, 9, 3,
    10, 1, 9, 10, 9, 5, 6, 10, 5, 9, 1, 3, 6, 10, 13, 10, 5, 13, 8, 13, 5, 9,
    1, 13, 8, 9, 13, 3, 13, 1, 7, 13, 3, 6, 7, 13, 9, 5, 13, 6, 13, 5, 6, 10,
    13, 10, 1, 13, 3, 13, 1, 7, 3, 13, 8, 13, 7, 8, 9, 13, 6, 10, 5, 8, 9, 1,
    8, 1, 7, 7, 1, 3],
  [6, 2, 7, 5, 8, 1, 8, 4, 1, 7, 2, 3, 6, 8, 7, 6, 5, 8, 8, 3, 7, 8, 4, 3, 2,
    1, 3, 1, 4, 3, 6, 1, 5, 6, 2, 1, 6, 13, 5, 6, 2, 13, 2, 3, 13, 7, 13, 3, 8,
    13, 7, 8, 4, 13, 1, 13, 4, 5, 13, 1, 2, 1, 13, 6, 2, 13, 6, 13, 7, 7, 13,
    3, 4, 3, 13, 8, 4, 13, 5, 8, 13, 5, 13, 1, 6, 2, 5, 5, 2, 1, 8, 3, 7, 8, 4,
    3],
  [7, 6, 3, 3, 6, 2, 5, 8, 9, 7, 8, 3, 3, 8, 9, 3, 9, 2, 5, 2, 9, 5, 6, 2, 7,
    5, 6, 7, 8, 5, 8, 9, 5, 7, 8, 3, 3, 8, 9, 3, 9, 2, 5, 2, 9, 5, 6, 2],
  [10, 5, 2, 5, 8, 2, 11, 7, 6, 2, 8, 4, 10, 11, 6, 10, 2, 11, 11, 4, 2, 11,
    7, 4, 5, 8, 7, 5, 7, 6, 10, 5, 6, 7, 8, 4, 10, 5, 13, 5, 6, 13, 11, 13, 6,
    7, 8, 13, 11, 7, 13, 4, 13, 8, 2, 13, 4, 10, 2, 13, 7, 6, 13, 10, 13, 6,
    10, 5, 13, 5, 8, 13, 4, 13, 8, 2, 4, 13, 11, 13, 2, 11, 7, 13, 10, 5, 6,
    11, 7, 8, 11, 8, 2, 2, 8, 4],
  [8, 9, 5, 6, 11, 7, 10, 1, 2, 8, 9, 5, 6, 10, 1, 6, 1, 7, 2, 7, 1, 2, 11,
    7, 6, 11, 7, 8, 10, 5, 8, 2, 10, 8, 9, 1, 8, 1, 2, 10, 1, 2, 8, 11, 7, 8,
    9, 11, 9, 6, 11, 9, 5, 6, 8, 9, 13, 9, 1, 13, 2, 13, 1, 2, 11, 13, 11, 7,
    13, 6, 13, 7, 6, 10, 13, 10, 5, 13, 8, 13, 5, 8, 9, 13, 8, 7, 13, 11, 7,
    13, 2, 11, 13, 2, 13, 1, 10, 13, 1, 6, 10, 13, 6, 13, 5, 9, 5, 13, 2, 13,
    1, 9, 1, 13, 8, 9, 13, 8, 13, 7, 11, 7, 13, 6, 11, 13, 6, 13, 5, 10, 5, 13,
    10, 13, 2, 8, 11, 7, 8, 1, 11, 8, 9, 1, 2, 11, 1, 6, 10,
    5, 8, 5, 7, 6, 7, 5, 6, 11, 7, 6, 2, 11, 6, 10, 2, 10, 1, 2, 10, 5, 1, 9,
    1, 5, 8, 9, 5],
  [5, 8, 1, 1, 8, 4, 7, 6, 11, 5, 6, 1, 1, 6, 11, 1, 11, 4, 7, 4, 11, 7, 8,
    4, 5, 7, 8, 5, 6, 7, 6, 11, 7, 5, 6, 1, 1, 6, 11, 1, 11, 4, 7, 4, 11, 7, 8,
    4],
  [7, 6, 11, 5, 8, 9, 7, 8, 11, 11, 8, 9, 11, 9, 5, 11, 5, 6],
  [6, 10, 7, 7, 10, 12, 10, 9, 12],
  [4, 12, 7, 4, 6, 1, 4, 7, 6, 6, 10, 1],
  [1, 9, 12, 1, 12, 6, 1, 6, 2, 12, 7, 6],
  [12, 7, 4, 7, 6, 4, 4, 6, 2],
  [6, 10, 7, 7, 10, 12, 2, 11, 3, 10, 9, 12, 6, 11, 2, 6, 2, 10, 2, 10, 9, 2,
    9, 3, 7, 3, 12, 7, 11, 3, 6, 11, 7, 3, 9, 12, 6, 13, 7, 7, 13, 11, 2, 11,
    13, 3, 13, 12, 2, 13, 3, 9, 12, 13, 10, 9, 13, 6, 13, 10, 3, 13, 11, 6, 11,
    13, 6, 13, 7, 7, 13, 12, 9, 12, 13, 10, 13, 9, 2, 10, 13, 2, 13, 3, 6, 11,
    7, 2, 12, 3, 2, 10, 12, 10, 9, 12],
  [4, 12, 3, 2, 10, 1, 11, 7, 6, 4, 12, 3, 2, 11, 7, 2, 7, 1, 6, 1, 7, 6, 10,
    1, 2, 10, 1, 4, 11, 3, 4, 6, 11, 4, 12, 7, 4, 7, 6, 11, 7, 6, 4, 10, 1, 4,
    12, 10, 12, 2, 10, 12, 3, 2, 4, 12, 13, 12, 7, 13, 6, 13, 7, 6, 10, 13, 10,
    1, 13, 2, 13, 1, 2, 11, 13, 11, 3, 13, 4, 13, 3, 4, 12, 13, 4, 1, 13, 10,
    1, 13, 6, 10, 13, 6, 13, 7, 11, 13, 7, 2, 11, 13, 2, 13, 3, 12, 3, 13, 6,
    13, 7, 12, 7, 13, 4, 12, 13, 4, 13, 1, 10, 1, 13, 2, 10, 13, 2, 13, 3, 11,
    3, 13, 11, 13, 6, 4, 10, 1, 4, 7, 10, 4, 12, 7, 6,
    10, 7, 2, 11, 3, 4, 3, 1, 2, 1, 3, 2, 10, 1, 2, 6, 10, 2, 11, 6, 11, 7, 6,
    11, 3, 7, 12, 7, 3, 4, 12, 3],
  [12, 3, 9, 9, 3, 1, 11, 7, 6, 12, 7, 9, 9, 7, 6, 9, 6, 1, 11, 1, 6, 11, 3,
    1, 12, 11, 3, 12, 7, 11, 7, 6, 11, 12, 7, 9, 9, 7, 6, 9, 6, 1, 11, 1, 6,
    11, 3, 1],
  [12, 3, 4, 11, 7, 6, 12, 7, 4, 4, 7, 6, 4, 6, 11, 4, 11, 3],
  [6, 3, 7, 6, 9, 3, 6, 10, 9, 4, 9, 3],
  [6, 10, 7, 10, 1, 7, 7, 1, 3],
  [2, 3, 6, 6, 3, 7, 4, 1, 9, 2, 1, 6, 6, 1, 9, 6, 9, 7, 4, 7, 9, 4, 3, 7, 2,
    4, 3, 2, 1, 4, 1, 9, 4, 2, 1, 6, 6, 1, 9, 6, 9, 7, 4, 7, 9, 4, 3, 7],
  [2, 3, 6, 6, 3, 7],
  [2, 10, 4, 4, 10, 9, 6, 11, 7, 2, 11, 4, 4, 11, 7, 4, 7, 9, 6, 9, 7, 6, 10,
    9, 2, 6, 10, 2, 11, 6, 11, 7, 6, 2, 11, 4, 4, 11, 7, 4, 7, 9, 6, 9, 7, 6,
    10, 9],
  [6, 11, 7, 2, 10, 1, 6, 10, 7, 7, 10, 1, 7, 1, 2, 7, 2, 11],
  [6, 11, 7, 1, 9, 4, 6, 11, 1, 1, 11, 4, 7, 4, 11, 6, 9, 7, 6, 1, 9, 7, 9, 4],
  [6, 11, 7],
  [12, 11, 8, 11, 6, 8],
  [12, 11, 8, 11, 6, 8, 9, 1, 4, 12, 11, 4, 11, 1, 4, 11, 6, 1, 9, 1, 6, 9,
    6, 8, 12, 8, 9, 12, 9, 4, 4, 9, 1, 12, 11, 4, 11, 1, 4, 11, 6, 1, 9, 1, 6,
    9, 6, 8],
  [6, 8, 11, 8, 12, 11, 2, 1, 10, 6, 8, 10, 8, 1, 10, 8, 12, 1, 2, 1, 12, 2,
    12, 11, 6, 11, 2, 6, 2, 10, 10, 2, 1, 6, 8, 10, 8, 1, 10, 8, 12, 1, 2, 1,
    12, 2, 12, 11],
  [2, 4, 11, 10, 6, 9, 6, 8, 9, 11, 4, 12, 2, 6, 11, 2, 10, 6, 6, 12, 11, 6,
    8, 12, 4, 9, 12, 9, 8, 12, 2, 9, 10, 2, 4, 9, 2, 13, 10, 2, 4, 13, 4, 12,
    13, 11, 13, 12, 6, 13, 11, 6, 8, 13, 9, 13, 8, 10, 13, 9, 4, 9, 13, 2, 4,
    13, 2, 13, 11, 11, 13, 12, 8, 12, 13, 6, 8, 13, 10, 6, 13, 10, 13, 9, 2, 4,
    10, 10, 4, 9, 6, 12, 11, 6, 8, 12],
  [3, 2, 12, 12, 2, 8, 2, 6, 8],
  [9, 1, 8, 1, 2, 8, 12, 3, 4, 8, 2, 6, 9, 12, 4, 9, 8, 12, 12, 6, 8, 12, 3,
    6, 1, 2, 3, 1, 3, 4, 9, 1, 4, 3, 2, 6, 9, 1, 13, 1, 4, 13, 12, 13, 4, 3, 2,
    13, 12, 3, 13, 6, 13, 2, 8, 13, 6, 9, 8, 13, 3, 4, 13, 9, 13, 4, 9, 1, 13,
    1, 2, 13, 6, 13, 2, 8, 6, 13, 12, 13, 8, 12, 3, 13, 9, 1, 4, 12, 3, 2, 12,
    2, 8, 8, 2, 6],
  [10, 3, 1, 10, 8, 3, 10, 6, 8, 3, 8, 12],
  [8, 9, 6, 6, 9, 10, 4, 12, 3, 8, 12, 6, 6, 12, 3, 6, 3, 10, 4, 10, 3, 4, 9,
    10, 8, 4, 9, 8, 12, 4, 12, 3, 4, 8, 12, 6, 6, 12, 3, 6, 3, 10, 4, 10, 3, 4,
    9, 10],
  [11, 6, 3, 3, 6, 4, 6, 8, 4],
  [9, 1, 3, 9, 3, 6, 9, 6, 8, 11, 3, 6],
  [1, 10, 4, 10, 6, 4, 3, 11, 2, 4, 6, 8, 1, 3, 2, 1, 4, 3, 3, 8, 4, 3, 11,
    8, 10, 6, 11, 10, 11, 2, 1, 10, 2, 11, 6, 8, 1, 10, 13, 10, 2, 13, 3, 13,
    2, 11, 6, 13, 3, 11, 13, 8, 13, 6, 4, 13, 8, 1, 4, 13, 11, 2, 13, 1, 13, 2,
    1, 10, 13, 10, 6, 13, 8, 13, 6, 4, 8, 13, 3, 13, 4, 3, 11, 13, 1, 10, 2, 3,
    11, 6, 3, 6, 4, 4, 6, 8],
  [10, 6, 9, 9, 6, 8, 11, 2, 3, 10, 2, 9, 9, 2, 3, 9, 3, 8, 11, 8, 3, 11, 6,
    8, 10, 11, 6, 10, 2, 11, 2, 3, 11, 10, 2, 9, 9, 2, 3, 9, 3, 8, 11, 8, 3,
    11, 6, 8],
  [4, 6, 8, 4, 2, 6],
  [9, 1, 8, 1, 2, 8, 8, 2, 6],
  [1, 10, 4, 10, 6, 4, 4, 6, 8],
  [8, 9, 6, 6, 9, 10],
  [5, 9, 6, 6, 9, 11, 9, 12, 11],
  [6, 5, 1, 6, 1, 12, 6, 12, 11, 1, 4, 12],
  [2, 1, 11, 1, 9, 11, 6, 5, 10, 11, 9, 12, 2, 6, 10, 2, 11, 6, 6, 12, 11, 6,
    5, 12, 1, 9, 5, 1, 5, 10, 2, 1, 10, 5, 9, 12, 2, 1, 13, 1, 10, 13, 6, 13,
    10, 5, 9, 13, 6, 5, 13, 12, 13, 9, 11, 13, 12, 2, 11, 13, 5, 10, 13, 2, 13,
    10, 2, 1, 13, 1, 9, 13, 12, 13, 9, 11, 12, 13, 6, 13, 11, 6, 5, 13, 2, 1,
    10, 6, 5, 9, 6, 9, 11, 11, 9, 12],
  [11, 2, 12, 12, 2, 4, 10, 6, 5, 11, 6, 12, 12, 6, 5, 12, 5, 4, 10, 4, 5,
    10, 2, 4, 11, 10, 2, 11, 6, 10, 6, 5, 10, 11, 6, 12, 12, 6, 5, 12, 5, 4,
    10, 4, 5, 10, 2, 4],
  [3, 2, 6, 3, 6, 9, 3, 9, 12, 5, 6, 9],
  [1, 2, 5, 5, 2, 6, 3, 4, 12, 1, 4, 5, 5, 4, 12, 5, 12, 6, 3, 6, 12, 3, 2,
    6, 1, 3, 2, 1, 4, 3, 4, 12, 3, 1, 4, 5, 5, 4, 12, 5, 12, 6, 3, 6, 12, 3, 2,
    6],
  [1, 9, 3, 3, 9, 12, 5, 10, 6, 1, 10, 3, 3, 10, 6, 3, 6, 12, 5, 12, 6, 5, 9,
    12, 1, 5, 9, 1, 10, 5, 10, 6, 5, 1, 10, 3, 3, 10, 6, 3, 6, 12, 5, 12, 6, 5,
    9, 12],
  [6, 5, 10, 12, 3, 4, 6, 5, 12, 12, 5, 4, 10, 4, 5, 6, 3, 10, 6, 12, 3, 10,
    3, 4],
  [6, 5, 9, 6, 4, 11, 6, 9, 4, 4, 3, 11],
  [11, 6, 3, 6, 5, 3, 3, 5, 1],
  [6, 5, 10, 2, 3, 11, 1, 9, 4, 6, 5, 10, 2, 1, 9, 2, 9, 11, 4, 11, 9, 4, 3,
    11, 2, 3, 11, 6, 1, 10, 6, 4, 1, 6, 5, 9, 6, 9, 4, 1, 9, 4, 6, 3, 11, 6, 5,
    3, 5, 2, 3, 5, 10, 2, 6, 5, 13, 5, 9, 13, 4, 13, 9, 4, 3, 13, 3, 11, 13, 2,
    13, 11, 2, 1, 13, 1, 10, 13, 6, 13, 10, 6, 5, 13, 6, 11, 13, 3, 11, 13, 4,
    3, 13, 4, 13, 9, 1, 13, 9, 2, 1, 13, 2, 13, 10, 5, 10, 13, 4, 13, 9, 5, 9,
    13, 6, 5, 13, 6, 13, 11, 3, 11, 13, 2, 3, 13, 2, 13, 10, 1, 10, 13, 1, 13,
    4, 6, 3, 11, 6, 9, 3, 6, 5, 9, 4, 3, 9, 2, 1, 10,
    6, 10, 11, 2, 11, 10, 2, 3, 11, 2, 4, 3, 2, 1, 4, 1, 9, 4, 1, 10, 9, 5, 9,
    10, 6, 5, 10],
  [10, 6, 5, 11, 2, 3, 10, 2, 5, 5, 2, 3, 5, 3, 11, 5, 11, 6],
  [5, 9, 6, 9, 4, 6, 6, 4, 2],
  [1, 2, 5, 5, 2, 6],
  [5, 10, 6, 1, 9, 4, 5, 9, 6, 6, 9, 4, 6, 4, 1, 6, 1, 10],
  [6, 5, 10],
  [8, 12, 5, 5, 12, 10, 12, 11, 10],
  [8, 12, 5, 5, 12, 10, 4, 9, 1, 12, 11, 10, 8, 9, 4, 8, 4, 12, 4, 12, 11, 4,
    11, 1, 5, 1, 10, 5, 9, 1, 8, 9, 5, 1, 11, 10, 8, 13, 5, 5, 13, 9, 4, 9, 13,
    1, 13, 10, 4, 13, 1, 11, 10, 13, 12, 11, 13, 8, 13, 12, 1, 13, 9, 8, 9, 13,
    8, 13, 5, 5, 13, 10, 11, 10, 13, 12, 13, 11, 4, 12, 13, 4, 13, 1, 8, 9, 5,
    4, 10, 1, 4, 12, 10, 12, 11, 10],
  [2, 12, 11, 2, 5, 12, 2, 1, 5, 8, 5, 12],
  [4, 12, 2, 2, 12, 11, 8, 9, 5, 4, 9, 2, 2, 9, 5, 2, 5, 11, 8, 11, 5, 8, 12,
    11, 4, 8, 12, 4, 9, 8, 9, 5, 8, 4, 9, 2, 2, 9, 5, 2, 5, 11, 8, 11, 5, 8,
    12, 11],
  [2, 10, 5, 2, 8, 3, 2, 5, 8, 8, 12, 3],
  [2, 10, 1, 4, 12, 3, 9, 5, 8, 2, 10, 1, 4, 9, 5, 4, 5, 3, 8, 3, 5, 8, 12,
    3, 4, 12, 3, 2, 9, 1, 2, 8, 9, 2, 10, 5, 2, 5, 8, 9, 5, 8, 2, 12, 3, 2, 10,
    12, 10, 4, 12, 10, 1, 4, 2, 10, 13, 10, 5, 13, 8, 13, 5, 8, 12, 13, 12, 3,
    13, 4, 13, 3, 4, 9, 13, 9, 1, 13, 2, 13, 1, 2, 10, 13, 2, 3, 13, 12, 3, 13,
    8, 12, 13, 8, 13, 5, 9, 13, 5, 4, 9, 13, 4, 13, 1, 10, 1, 13, 8, 13, 5, 10,
    5, 13, 2, 10, 13, 2, 13, 3, 12, 3, 13, 4, 12, 13, 4, 13, 1, 9, 1, 13, 9,
    13, 8, 2, 12, 3, 2, 5, 12, 2, 10, 5, 8, 12, 5, 4,
    9, 1, 2, 1, 3, 4, 3, 1, 4, 12, 3, 4, 8, 12, 4, 9, 8, 9, 5, 8, 9, 1, 5, 10,
    5, 1, 2, 10, 1],
  [8, 12, 5, 12, 3, 5, 5, 3, 1],
  [8, 9, 5, 4, 12, 3, 8, 12, 5, 5, 12, 3, 5, 3, 4, 5, 4, 9],
  [3, 8, 4, 3, 10, 8, 3, 11, 10, 8, 10, 5],
  [10, 1, 11, 11, 1, 3, 9, 5, 8, 10, 5, 11, 11, 5, 8, 11, 8, 3, 9, 3, 8, 9,
    1, 3, 10, 9, 1, 10, 5, 9, 5, 8, 9, 10, 5, 11, 11, 5, 8, 11, 8, 3, 9, 3, 8,
    9, 1, 3],
  [4, 1, 8, 8, 1, 5, 2, 3, 11, 4, 3, 8, 8, 3, 11, 8, 11, 5, 2, 5, 11, 2, 1,
    5, 4, 2, 1, 4, 3, 2, 3, 11, 2, 4, 3, 8, 8, 3, 11, 8, 11, 5, 2, 5, 11, 2, 1,
    5],
  [2, 3, 11, 9, 5, 8, 2, 3, 9, 9, 3, 8, 11, 8, 3, 2, 5, 11, 2, 9, 5, 11, 5, 8],
  [10, 5, 2, 5, 8, 2, 2, 8, 4],
  [10, 1, 2, 9, 5, 8, 10, 5, 2, 2, 5, 8, 2, 8, 9, 2, 9, 1],
  [5, 8, 1, 1, 8, 4],
  [8, 9, 5],
  [11, 10, 9, 11, 9, 12],
  [1, 4, 10, 4, 12, 10, 10, 12, 11],
  [2, 1, 11, 1, 9, 11, 11, 9, 12],
  [4, 12, 2, 2, 12, 11],
  [3, 2, 12, 2, 10, 12, 12, 10, 9],
  [1, 2, 10, 3, 4, 12, 1, 4, 10, 10, 4, 12, 10, 12, 3, 10, 3, 2],
  [12, 3, 9, 9, 3, 1],
  [12, 3, 4],
  [4, 3, 9, 3, 11, 9, 9, 11, 10],
  [10, 1, 11, 11, 1, 3],
  [2, 3, 11, 4, 1, 9, 2, 1, 11, 11, 1, 9, 11, 9, 4, 11, 4, 3],
  [2, 3, 11],
  [9, 4, 10, 10, 4, 2],
  [1, 2, 10],
  [4, 1, 9]
];

// -----------------------------------------------------------------------------
var Faces = [
  [0],
  [0],
  [0],
  [0],
  [5],
  [0],
  [0],
  [0],
  [0],
  [-5],
  [0],
  [0],
  [0],
  [0],
  [0],
  [0],
  [0],
  [-1],
  [0],
  [7],
  [5, 7],
  [-1, 7],
  [0],
  [-4],
  [0],
  [-5, -1, -4, 7],
  [0],
  [-4, 7],
  [0],
  [-4, -1, 7],
  [0],
  [0],
  [1],
  [0],
  [0],
  [-2],
  [-2, 1, 5, -7],
  [0],
  [0],
  [-7],
  [1, -7],
  [-5, -7],
  [0],
  [-2, -7],
  [-2, 1, -7],
  [0],
  [0],
  [0],
  [0],
  [0],
  [0],
  [-2, 7],
  [5, -2, 7],
  [0],
  [0],
  [-4, -7],
  [0],
  [-4, -5, -7],
  [0],
  [-2, -4, 7],
  [2, -7],
  [4, 7],
  [0],
  [0],
  [7],
  [2],
  [2, 7],
  [0],
  [5, 7],
  [0],
  [0],
  [3],
  [3, 7],
  [-5, 3, 2, 7],
  [2, 3, 7],
  [0],
  [0],
  [0],
  [0],
  [6],
  [6, 7],
  [6, -1, 2, -7],
  [2, 6, 7],
  [6, 7],
  [6, 5, 7],
  [6, -1, 7],
  [-6, -7],
  [6, 3, -4, -7],
  [6, 3, 7],
  [-5, -1, 6, 3, 2, -4, 7],
  [-3, -6, -2, 7],
  [-4, 6, 7],
  [-6, -7],
  [-6, 4, 1, 7],
  [-6],
  [0],
  [1, 7],
  [0],
  [0],
  [0],
  [5, 1, 7],
  [0],
  [0],
  [3, -7],
  [1, 3, 7],
  [-5, 3, -7],
  [-3, 7],
  [0],
  [-1, -7],
  [0],
  [0],
  [0],
  [0],
  [0],
  [0],
  [0],
  [-5, -7],
  [0],
  [0],
  [-4, 3, -7],
  [-3, -7],
  [4, -3, 5, -7],
  [-3],
  [4, -7],
  [-7],
  [4],
  [0],
  [0],
  [4],
  [-7],
  [4, -7],
  [-3],
  [4, -3, 5, -7],
  [-3, -7],
  [4, -3, -7],
  [0],
  [0],
  [-5, -7],
  [0],
  [0],
  [0],
  [0],
  [0],
  [0],
  [0],
  [-1, -7],
  [0],
  [-3, 7],
  [5, -3, 7],
  [-1, -3, 7],
  [3, -7],
  [0],
  [0],
  [-5, -1, -7],
  [0],
  [0],
  [0],
  [1, 7],
  [0],
  [-6],
  [-6, 4, 1, 7],
  [-6, -7],
  [4, -6, -7],
  [-3, -6, -2, 7],
  [5, 1, -6, -3, -2, 4, 7],
  [-6, -3, -7],
  [6, 3, -4, -7],
  [-6, -7],
  [-6, 1, -7],
  [-6, -5, -7],
  [6, 7],
  [-2, -6, -7],
  [6, -1, 2, -7],
  [6, 7],
  [6],
  [0],
  [0],
  [0],
  [0],
  [-2, -3, 7],
  [-5, 3, 2, 7],
  [3, 7],
  [3],
  [0],
  [0],
  [5, 7],
  [0],
  [2, 7],
  [2],
  [7],
  [0],
  [0],
  [4, 7],
  [2, -7],
  [2, 4, 7],
  [0],
  [4, 5, 7],
  [0],
  [-4, -7],
  [0],
  [0],
  [-5, 2, -7],
  [-2, 7],
  [0],
  [0],
  [0],
  [0],
  [0],
  [0],
  [2, -1, -7],
  [-2, -7],
  [0],
  [-5, -7],
  [1, -7],
  [-7],
  [0],
  [0],
  [-2, 1, 5, -7],
  [-2],
  [0],
  [0],
  [1],
  [0],
  [0],
  [4, 1, 7],
  [0],
  [-4, 7],
  [0],
  [-5, -1, -4, 7],
  [0],
  [-4],
  [0],
  [-1, 7],
  [5, 7],
  [7],
  [0],
  [-1],
  [0],
  [0],
  [0],
  [0],
  [0],
  [0],
  [0],
  [-5],
  [0],
  [0],
  [0],
  [0],
  [5],
  [0],
  [0],
  [0],
  [0]
];

// -----------------------------------------------------------------------------
var FacesSizes =
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    2, 2, 1, 1, 1, 4, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2,
    2, 1, 2, 3, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 3, 1, 3, 2, 2,
    1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 4, 3, 1, 1, 1, 1, 1, 2, 4, 3,
    2, 3, 3, 2, 4, 3, 7, 4, 3, 2, 4, 1, 1, 2, 1, 1, 1, 3, 1, 1, 2,
    3, 3, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 2, 4, 1, 2, 1,
    1, 1, 1, 1, 1, 2, 1, 4, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,
    1, 2, 3, 3, 2, 1, 1, 3, 1, 1, 1, 2, 1, 1, 4, 2, 3, 4, 7, 3, 4,
    2, 3, 3, 2, 3, 4, 2, 1, 1, 1, 1, 1, 3, 4, 2, 1, 1, 1, 2, 1, 2,
    1, 1, 1, 1, 2, 2, 3, 1, 3, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1,
    3, 2, 1, 2, 2, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 4, 1,
    1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1];

// -----------------------------------------------------------------------------
var FacePoints = [
  [1, 1, 6, 2, 5, 60],
  [2, 2, 7, 3, 6, 252],
  [3, 4, 7, 3, 8, 672],
  [4, 1, 8, 4, 5, 160],
  [5, 1, 3, 2, 4, 24],
  [6, 5, 7, 6, 8, 1680]
];

// -----------------------------------------------------------------------------
var special_name = [3, 4, 6, 7, 10, 12, 13];
var special_nface = [1, 1, 2, 4, 3, 3, 7];
var special_nedge = [18, 24, 48, 177, 96, 96, 816];
var special_indSizes = [2, 2, 4, 16, 8, 8, 31];

// -----------------------------------------------------------------------------
var special_ind = [
  [0, 1],
  [0, 1],
  [0, 2, 1, 3],
  [0, 8, 4, 12, 2, 10, 1, 9, 6, 14, 5, 13, 3, 11, 15, 7],
  [0, 4, 1, 5, 2, 6, 3, 7],
  [0, 4, 2, 6, 1, 5, 3, 7],
  [0, 1, 2, 4, 8, 16, 32, 3, 9, 17, 33, 6, 18, 34, 12, 20, 36, 24, 40, 35, 25,
    22, 44, 19, 41, 38, 28, 83, 105, 102, 92]
];

// -----------------------------------------------------------------------------
var special_pos = [
  [
    [1, 2, 3, 4, 5, 6],
    [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
  ],
  [
    [1, 2, 3, 4, 5, 6],
    [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
  ],
  [
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
      28, 29, 30, 31, 32, 33],
    [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48],
    [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]
  ],
  [
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],
    [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],
    [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
    [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
    [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
      73, 74, 75, 76, 77, 78, 79, 80, 81],
    [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
      73, 74, 75, 76, 77, 78, 79, 80, 81],
    [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
      100, 101, 102, 103, 104, 105, 106, 107, 108],
    [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
      100, 101, 102, 103, 104, 105, 106, 107, 108],
    [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
      124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135],
    [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
      124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135],
    [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],
    [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
      166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177]
  ],
  [
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
      31, 32, 33, 34, 35, 36],
    [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
      55, 56, 57, 58, 59, 60],
    [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
      55, 56, 57, 58, 59, 60],
    [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
      79, 80, 81, 82, 83, 84],
    [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
      79, 80, 81, 82, 83, 84],
    [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96],
    [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96]
  ],
  [
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
      31, 32, 33, 34, 35, 36],
    [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
      55, 56, 57, 58, 59, 60],
    [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
      55, 56, 57, 58, 59, 60],
    [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
      79, 80, 81, 82, 83, 84],
    [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
      79, 80, 81, 82, 83, 84],
    [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96],
    [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96]
  ],
  [
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48],
    [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66],
    [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84],
    [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102],
    [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
      118, 119, 120],
    [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
      136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],
    [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
      166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180],
    [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
      196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210],
    [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
      226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240],
    [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270],
    [271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
      286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300],
    [301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315,
      316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330],
    [331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
      346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360],
    [361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
      376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390],
    [391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
      406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420],
    [421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435,
      436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450],
    [451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465,
      466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480],
    [481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495,
      496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
      511, 512, 513, 514, 515, 516],
    [517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
      532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546,
      547, 548, 549, 550, 551, 552],
    [553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
      568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
      583, 584, 585, 586, 587, 588],
    [589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
      604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
      619, 620, 621, 622, 623, 624],
    [625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
      640, 641, 642],
    [643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
      658, 659, 660],
    [661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
      676, 677, 678],
    [679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
      694, 695, 696],
    [697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
      712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726],
    [727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
      742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756],
    [757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
      772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786],
    [787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
      802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816]
  ]
];

// -----------------------------------------------------------------------------
var special_posSize = [
  [6, 12],
  [6, 18],
  [9, 24, 15, 15],
  [9, 9, 15, 15, 15, 15, 15, 15, 27, 27, 27, 27, 27, 27, 15, 27],
  [12, 24, 24, 24, 24, 24, 12, 12],
  [12, 24, 24, 24, 24, 24, 12, 12],
  [12, 18, 18, 18, 18, 18, 18, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
    36, 36, 36, 36, 18, 18, 18, 18, 30, 30, 30, 30]
];

// -----------------------------------------------------------------------------
function FacesNo7(faces, p1, values, l, j) {
  var index = new Array(l);
  for (var i = 0; i < l; i++) {
    var f = Math.abs(faces[i]) - 1;
    var e1 = FacePoints[f][1];
    var e2 = FacePoints[f][2];
    var e3 = FacePoints[f][3];
    var e4 = FacePoints[f][4];
    var p = p1[i] - 2;
    var A = values[p + e1];
    var B = values[p + e2];
    var C = values[p + e3];
    var D = values[p + e4];
    var temp = faces[i] > 0 ? 1 : -1;
    temp *= (A * B - C * D > 0 ? 1 : -1);
    index[i] = temp == 1 ? 2 ** (j - 1) : 0;
  }
  return index;
}

// -----------------------------------------------------------------------------
function Faces7(faces, p1, values, l, j) {
  var index = new Array(l);
  for (var i = 0; i < l; i++) {
    var p = p1[i] - 1;
    var A0 = values[p];
    var B0 = values[p + 3];
    var C0 = values[p + 2];
    var D0 = values[p + 1];
    var A1 = values[p + 4];
    var B1 = values[p + 7];
    var C1 = values[p + 6];
    var D1 = values[p + 5];
    var a = (A1 - A0) * (C1 - C0) - (B1 - B0) * (D1 - D0);
    var b = C0 * (A1 - A0) + A0 * (C1 - C0) - D0 * (B1 - B0) - B0 * (D1 - D0);
    var c = A0 * C0 - B0 * D0;
    var tmax = -b / (2 * a);
    var maximum = a * tmax * tmax + b * tmax + c;
    maximum = isNaN(maximum) ? -1 : maximum;
    var cond1 = a < 0 ? 1 : 0;
    var cond2 = tmax > 0 ? 1 : 0;
    var cond3 = tmax < 1 ? 1 : 0;
    var cond4 = maximum > 0 ? 1 : 0;
    var totalcond = cond1 * cond2 * cond3 * cond4;
    var temp = faces[i] > 0 ? 1 : -1;
    temp *= (totalcond == 1 ? 1 : -1);
    index[i] = temp == 1 ? 2 ** (j - 1) : 0;
  }
  return index;
}

// -----------------------------------------------------------------------------
function Voxel(f, xmin, xmax, ymin, ymax, zmin, zmax, nx, ny, nz) {
  var out = new Array(nx);
  for (var i = 0; i < nx; i++) {
    out[i] = new Array(ny);
    for (var j = 0; j < ny; j++) {
      out[i][j] = new Array(nz);
      for (var k = 0; k < nz; k++) {
        out[i][j][k] =
          f(xmin + (xmax - xmin) * i / (nx - 1),
            ymin + (ymax - ymin) * j / (ny - 1),
            zmin + (zmax - zmin) * k / (nz - 1));
      }
    }
  }
  return out;
}

// -----------------------------------------------------------------------------
function faceType(M, m, n, level, max) {
  var L = levelMatrix(M, m, n, level, level < max);
  var minorMat = minorMatrix(L, m, n, m - 1, n - 1);
  var sminorMat2 = scaleMinorMatrix(2, L, m, n, 0, n - 1);
  var sminorMat4 = scaleMinorMatrix(4, L, m, n, 0, 0);
  var sminorMat8 = scaleMinorMatrix(8, L, m, n, m - 1, 0);
  var sum1 = matricialSum(minorMat, sminorMat2, m - 1, n - 1);
  var sum2 = matricialSum(sminorMat4, sminorMat8, m - 1, n - 1);
  var out = matricialSum(sum1, sum2, m - 1, n - 1);
  return out;
}

// -----------------------------------------------------------------------------
function levCells(A, nx, ny, nz, level, max) {
  var cells = new Array(nz - 1);
  var types = new Array(nz - 1);
  var bottomTypes = faceType(toMatrix(A, nx, ny, 0), nx, ny, level, max);
  var totallength = 0;
  var lengths = new Array(nz - 1);
  for (var k = 0; k < nz - 1; k++) {
    var topTypes = faceType(toMatrix(A, nx, ny, k + 1), nx, ny, level, max);
    var cellTypes =
      matricialSum(bottomTypes,
        scaleMatrix(16, topTypes, nx - 1, ny - 1), nx - 1, ny - 1);
    var goodcells01 = whichIndicesAndItems(cellTypes, nx - 1, ny - 1);
    cells[k] = new Array(goodcells01.length)
    types[k] = new Array(goodcells01.length)
    for (var l = 0; l < goodcells01.length; l++) {
      cells[k][l] = goodcells01.indices[l] + (nx - 1) * (ny - 1) * k + 1;
      types[k][l] = goodcells01.items[l];
    }
    bottomTypes = topTypes;
    lengths[k] = goodcells01.length;
    totallength += goodcells01.length;
  }
  var out = new Array(4);
  out[0] = new Array(totallength); out[1] = new Array(totallength);
  out[2] = new Array(totallength); out[3] = new Array(totallength);
  var count = 0;
  for (var k = 0; k < nz - 1; k++) {
    for (var l = 0; l < lengths[k]; l++) {
      var c = cells[k][l] - 1;
      out[0][count] = c % (nx - 1) + 1;
      out[1][count] = Math.floor(c / (nx - 1)) % (ny - 1) + 1;
      out[2][count] = Math.floor(c / ((nx - 1) * (ny - 1))) + 1;
      out[3][count] = types[k][l];
      count++;
    }
  }
  return { out: out, outnrow: totallength };
}

// -----------------------------------------------------------------------------
function GetBasic1(R, nR, vivjvk) {
  var indexPtr = new Array(8);
  for (var i = 0; i < 8; i++) {
    indexPtr[i] = new Array(3);
    for (var j = 0; j < 3; j++) {
      indexPtr[i][j] = indexArray[i][j];
    }
  }
  var cube1 = new Array(nR);
  for (var i = 0; i < nR; i++) {
    cube1[i] = new Array(3);
    var vivjvkRi = vivjvk[R[i]];
    for (var j = 0; j < 3; j++) {
      cube1[i][j] = vivjvkRi[j];
    }
  }
  var k1 = kro1(indexPtr, 8, 3, nR);
  var k2 = kro2(cube1, nR, 3, 8);
  var cubeco = matricialSum(k1, k2, 8 * nR + 1, 3);
  return cubeco;
}

// -----------------------------------------------------------------------------
function GetBasic2prime(A, level, cubeco, nR) {
  var values = new Array(8 * nR + 1);
  for (var i = 0; i < 8 * nR; i++) {
    values[i] = A[cubeco[i][0] - 1][cubeco[i][1] - 1][cubeco[i][2] - 1] - level;
  }
  values[8 * nR] = 0;
  return values;
}

// -----------------------------------------------------------------------------
function get_tcase(types, nrow) {
  var CRF =
    [1, 2, 2, 3, 2, 4, 3, 6, 2, 3, 4, 6, 3, 6, 6, 9, 2, 3, 4, 6,
      5, 7, 7, 12, 4, 6, 8, 10, 7, 15, 13, 6, 2, 4, 3, 6, 4, 8, 6,
      10, 5, 7, 7, 15, 7, 13, 12, 6, 3, 6, 6, 9, 7, 13, 15, 6, 7, 12,
      13, 6, 11, 7, 7, 3, 2, 5, 4, 7, 3, 7, 6, 15, 4, 7, 8, 13, 6,
      12, 10, 6, 4, 7, 8, 13, 7, 11, 13, 7, 8, 13, 14, 8, 13, 7, 8,
      4, 3, 7, 6, 12, 6, 13, 9, 6, 7, 11, 13, 7, 15, 7, 6, 3, 6, 15,
      10, 6, 12, 7, 6, 3, 13, 7, 8, 4, 7, 5, 4, 2, 2, 4, 5, 7, 4, 8,
      7, 13, 3, 6, 7, 12, 6, 10, 15, 6, 3, 6, 7, 15, 7, 13, 11, 7,
      6, 9, 13, 6, 12, 6, 7, 3, 4, 8, 7, 13, 8, 14, 13, 8, 7, 13, 11,
      7, 13, 8, 7, 4, 6, 10, 12, 6, 13, 8, 7, 4, 15, 6, 7, 3, 7, 4,
      5, 2, 3, 7, 7, 11, 6, 13, 12, 7, 6, 15, 13, 7, 9, 6, 6, 3, 6,
      12, 13, 7, 15, 7, 7, 5, 10, 6, 8, 4, 6, 3, 4, 2, 6, 13, 15, 7,
      10, 8, 6, 4, 12, 7, 7, 5, 6, 4, 3, 2, 9, 6, 6, 3, 6, 4, 3, 2,
      6, 3, 4, 2, 3, 2, 2, 1];
  out = new Array(nrow);
  for (var i = 0; i < nrow; i++) {
    out[i] = CRF[types[i]] - 1;
  }
  return out;
}

// -----------------------------------------------------------------------------
function getR(tcase, nrow) {
  out = [];
  for (var i = 0; i < nrow; i++) {
    var c = tcase[i];
    if (c == 1 || c == 2 || c == 5 || c == 8 || c == 9 || c == 11 || c == 14) {
      out.push(i);
    }
  }
  return out;
}

// -----------------------------------------------------------------------------
function LambdaMu(x1, n) {
  var lambdamu = new Array(2);
  lambdamu[0] = new Array(n); lambdamu[1] = new Array(n);
  for (var i = 0; i < n; i++) {
    lambdamu[0][i] = Math.floor(x1[i] / 9);
    lambdamu[1][i] = 1 - lambdamu[0][i];
  }
  return lambdamu;
}

function average(lambdamu, w1, w2, n) {
  var lambda = lambdamu[0]; var mu = lambdamu[1];
  var out = new Array(n);
  for (var i = 0; i < n; i++) {
    out[i] = mu[i] * w1[i] + lambda[i] * w2[i];
  }
  return out;
}

function average7(lambdamu, w, n) {
  var lambda = lambdamu[0]; var mu = lambdamu[1];
  var out = new Array(n);
  for (var i = 0; i < n; i++) {
    out[i] = mu[i] * w[i] + lambda[i];
  }
  return out;
}

function average8(lambdamu, w, n) {
  var lambda = lambdamu[0]; var mu = lambdamu[1];
  var out = new Array(n);
  for (var i = 0; i < n; i++) {
    out[i] = mu[i] * w[i] - lambda[i];
  }
  return out;
}

// -----------------------------------------------------------------------------
function GetPoints(cubeco, values, p1, x1, x2, n) {
  var p1x1 = new Array(n); var p1x2 = new Array(n);
  for (var i = 0; i < n; i++) {
    p1x1[i] = p1[i] + x1[i]; p1x2[i] = p1[i] + x2[i];
  }
  var lambdamu = LambdaMu(x1, n);
  var v1 = new Array(n); var v2 = new Array(n); var v3 = new Array(n);
  var v4 = new Array(n); var v5 = new Array(n); var v6 = new Array(n);
  var v7 = new Array(n); var v8 = new Array(n);
  var w1 = new Array(n); var w2 = new Array(n); var w3 = new Array(n);
  var w4 = new Array(n); var w5 = new Array(n); var w6 = new Array(n);
  for (var i = 0; i < n; i++) {
    v1[i] = cubeco[p1x1[i] - 2][0];
    w1[i] = cubeco[p1[i] - 1][0];
    v2[i] = cubeco[p1x2[i] - 2][0];
    w2[i] = cubeco[p1[i]][0];
    v3[i] = cubeco[p1x1[i] - 2][1];
    w3[i] = cubeco[p1[i]][1];
    v4[i] = cubeco[p1x2[i] - 2][1];
    w4[i] = cubeco[p1[i] + 1][1];
    v5[i] = cubeco[p1x1[i] - 2][2];
    w5[i] = cubeco[p1[i]][2];
    v6[i] = cubeco[p1x2[i] - 2][2];
    w6[i] = cubeco[p1[i] + 4][2];
    v7[i] = values[p1x1[i] - 2];
    v8[i] = values[p1x2[i] - 2];
  }
  var out = new Array(8);
  out[0] = average(lambdamu, v1, w1, n);
  out[1] = average(lambdamu, v2, w2, n);
  out[2] = average(lambdamu, v3, w3, n);
  out[3] = average(lambdamu, v4, w4, n);
  out[4] = average(lambdamu, v5, w5, n);
  out[5] = average(lambdamu, v6, w6, n);
  out[6] = average7(lambdamu, v7, n);
  out[7] = average8(lambdamu, v8, n);
  return (out);
}

// -----------------------------------------------------------------------------
function CalPoints(points, n) {
  var x1 = points[0]; var x2 = points[1];
  var y1 = points[2]; var y2 = points[3];
  var z1 = points[4]; var z2 = points[5];
  var v1 = points[6]; var v2 = points[7];
  var x = new Array(n); var y = new Array(n); var z = new Array(n);
  for (var i = 0; i < n; i++) {
    var s = v1[i] / (v1[i] - v2[i]);
    x[i] = x1[i] + s * (x2[i] - x1[i]);
    y[i] = y1[i] + s * (y2[i] - y1[i]);
    z[i] = z1[i] + s * (z2[i] - z1[i]);
  }
  var out = new Array(3);
  out[0] = x; out[1] = y; out[2] = z;
  return transpose(out, 3, n);
}

// -----------------------------------------------------------------------------
function computeContour3d(voxel, nx, ny, nz, max, level) {
  var obj_ijkt = levCells(voxel, nx, ny, nz, level, max);
  var ijkt = obj_ijkt.out;
  var nrow = obj_ijkt.outnrow;
  tcase = get_tcase(ijkt[3], nrow);
  var R = getR(tcase, nrow);
  var nR = R.length;
  if (nR == 0) {
    return [];
  } else {
    var vivjvk = new Array(nrow);
    for (var i = 0; i < nrow; i++) {
      vivjvk[i] = new Array(3);
      for (var j = 0; j < 3; j++) {
        vivjvk[i][j] = ijkt[j][i];
      }
    }
    var cubeco = GetBasic1(R, nR, vivjvk);
    var values = GetBasic2prime(voxel, level, cubeco, nR);
    var p1 = new Array(nR);
    for (var i = 0; i < nR; i++) {
      p1[i] = i * 8 + 1;
    }
    var vt = ijkt[3];
    var cases = new Array(nR);
    for (var i = 0; i < nR; i++) {
      cases[i] = vt[R[i]] - 1;
    }
    var edgeslengths = new Array(nR);
    var totalLength = 0;
    for (var i = 0; i < nR; i++) {
      edgeslengths[i] = EdgesLengths[cases[i]];
      totalLength += edgeslengths[i];
    }
    var p1rep = replicate(p1, edgeslengths, nR);
    var edges = new Array(totalLength);
    var edgeiter = 0;
    for (var i = 0; i < nR; i++) {
      for (var j = 0; j < edgeslengths[i]; j++) {
        edges[edgeiter] = Edges[cases[i]][j];
        edgeiter++;
      }
    }
    var x1 = new Array(totalLength); var x2 = new Array(totalLength);
    for (var i = 0; i < totalLength; i++) {
      var EPi = EdgePoints[edges[i] - 1];
      x1[i] = EPi[1]; x2[i] = EPi[2];
    }
    var points = GetPoints(cubeco, values, p1rep, x1, x2, totalLength);
    var triangles = CalPoints(points, totalLength);
    var special = 0;
    for (var i = 0; i < nrow; i++) {
      var tc = tcase[i];
      if (tc == 3 || tc == 4 || tc == 6 || tc == 7 || tc == 10 || tc == 12 ||
        tc == 13) {
        special = tc;
        break;
      }
    }
    if (special) {
      console.log("there are special cases")
    }
    for (var c = 0; c < 7; c++) {
      var R3 = whichEqual(tcase, special_name[c], nrow);
      var nR3 = R3.length;
      if (nR3 > 0) {
        var cubeco3 = GetBasic1(R3, nR3, vivjvk);
        var values3 = GetBasic2prime(voxel, level, cubeco3, nR3);
        var p13 = new Array(nR3);
        for (var i = 0; i < nR3; i++) {
          p13[i] = 8 * i + 1;
        }
        var cases3 = new Array(nR3);
        for (var i = 0; i < nR3; i++) {
          cases3[i] = vt[R3[i]] - 1;
        }
        var nedge = special_nedge[c];
        var faces3 = unlist(Faces, FacesSizes, cases3, nR3);
        var outlength3 = faces3.length;
        var index3;
        if (c == 0) {
          index3 = FacesNo7(faces3, p13, values3, nR3, 1);
        } else if (c == 1) {
          index3 = Faces7(faces3, p13, values3, nR3, 1);
        } else {
          var nface = special_nface[c];
          var facelast = jthColumn(faces3, outlength3, nface, nface - 1);
          index3 = Faces7(facelast, p13, values3, nR3, nface);
          for (var j = 0; j < nface - 1; j++) {
            var facej = jthColumn(faces3, outlength3, nface, j);
            var temp = FacesNo7(facej, p13, values3, nR3, j + 1);
            index3 = vectorialSum(index3, temp, nR3);
          }
        }
        var unlisted_edges3 = unlist(Edges, EdgesLengths, cases3, nR3);
        outlength3 = unlisted_edges3.length;
        var edges3 = vector2matrix(unlisted_edges3, outlength3, nedge);
        var edgesp1index = cbind(edges3, p13, index3, nR3, nedge);
        var ind3Size = special_indSizes[c];
        var ind3 = new Array(ind3Size);
        for (var i = 0; i < ind3Size; i++) {
          ind3[i] = special_ind[c][i];
        }
        for (var j = 0; j < ind3Size; j++) {
          var wrows = whichEqual(index3, ind3[j], nR3);
          var lwrows = wrows.length;
          if (lwrows > 0) {
            var lwcols = special_posSize[c][j] + 1;
            var wcols = new Array(lwcols);
            wcols[0] = nedge;
            for (var k = 1; k < lwcols; k++) {
              wcols[k] = special_pos[c][j][k - 1] - 1;
            }
            var ed = subsetMatrix(edgesp1index, wrows, wcols, lwrows, lwcols);
            var col0ed = new Array(lwrows);
            for (var i = 0; i < lwrows; i++) {
              col0ed[i] = ed[i][0];
            }
            var col0edrep = repeach(col0ed, lwcols - 1, lwrows);
            var edge1 = matrix2vectorMinusFirstColumn(ed, lwrows, lwcols);
            var totalLength3 = lwrows * (lwcols - 1);
            var xx1 = new Array(totalLength3);
            var xx2 = new Array(totalLength3);
            for (var i = 0; i < totalLength3; i++) {
              var EPi = EdgePoints[edge1[i] - 1];
              xx1[i] = EPi[1]; xx2[i] = EPi[2];
            }
            var points3 = GetPoints(cubeco3, values3, col0edrep, xx1,
              xx2, totalLength3);
            var triangles3 = CalPoints(points3, totalLength3);
            for (var i = 0; i < totalLength3; i++) {
              triangles.push(triangles3[i]);
            }
          }
        } /* end loop for(var j=0; j<ind3Size; j++) */
      } /* end if(nR3>0) */
    } /* end for(var i=0; i<7; i++) (loop over special_name) */
    return triangles;
  }
}

// ----------------------------------------------------------------------------
function marchingCubes(f, level, xmin, xmax, ymin, ymax, zmin, zmax,
  nx, ny, nz, max, rescale, logBounds) { 
  // default values
  if(typeof max === "undefined"){
    max = null;
  }
  if(typeof rescale === "undefined"){
    rescale = true;
  }
  if(typeof logBounds === "undefined"){
    logBounds = true;
  }
  // voxel 
  console.log("Calculate voxel...");
  var voxel = Voxel(f, xmin, xmax, ymin, ymax, zmin, zmax, nx, ny, nz);
  if (max === null) {
    max = maxArray(voxel, nx, ny, nz);
  }
  // marching cubes
  console.log("Marching cubes...");
  var triangles = computeContour3d(voxel, nx, ny, nz, max, level);
  var nrows = triangles.length;
  console.log("number of triangles: ", nrows / 3);
  if (logBounds) {
    var x = jthColumn2(triangles, nrows, 0);
    var y = jthColumn2(triangles, nrows, 1);
    var z = jthColumn2(triangles, nrows, 2);
    var xm = x.reduce(function (p, v) {
      return (p < v ? p : v);
    });
    var xM = x.reduce(function (p, v) { // https://stackoverflow.com/a/13440842
      return (p > v ? p : v);
    });
    var ym = y.reduce(function (p, v) {
      return (p < v ? p : v);
    });
    var yM = y.reduce(function (p, v) {
      return (p > v ? p : v);
    });
    var zm = z.reduce(function (p, v) {
      return (p < v ? p : v);
    });
    var zM = z.reduce(function (p, v) {
      return (p > v ? p : v);
    });
    var boundsx = [
      xmin + (xmax - xmin) * xm / (nx - 1),
      xmin + (xmax - xmin) * xM / (nx - 1)];
    console.log("x-bounds: ", boundsx);
    var boundsy = [
      ymin + (ymax - ymin) * ym / (ny - 1),
      ymin + (ymax - ymin) * yM / (ny - 1)];
    console.log("y-bounds: ", boundsy);
    var boundsz = [
      zmin + (zmax - zmin) * zm / (nz - 1),
      zmin + (zmax - zmin) * zM / (nz - 1)];
    console.log("z-bounds: ", boundsz);
  }
  // rescaling
  if (rescale) {
    var rangex = xmax - xmin;
    var rangey = ymax - ymin;
    var rangez = zmax - zmin;
    for (var i = 0; i < nrows; i++) {
      var vertex = triangles[i];
      vertex[0] = xmin + rangex * vertex[0] / (nx - 1);
      vertex[1] = ymin + rangey * vertex[1] / (ny - 1);
      vertex[2] = zmin + rangez * vertex[2] / (nz - 1);
      triangles[i] = vertex;
    }
  }
  // 
  return triangles;
}

// ----------------------------------------------------------------------------
